-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_write_jpeg_header is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    JpegEncoder_m_YTable_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    JpegEncoder_m_YTable_ce0 : OUT STD_LOGIC;
    JpegEncoder_m_YTable_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    JpegEncoder_m_CbCrTable_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    JpegEncoder_m_CbCrTable_ce0 : OUT STD_LOGIC;
    JpegEncoder_m_CbCrTable_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    jpeg_out_TVALID : OUT STD_LOGIC;
    jpeg_out_TREADY : IN STD_LOGIC;
    jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of p_write_jpeg_header is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (83 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (83 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (83 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (83 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (83 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (83 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (83 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (83 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (83 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (83 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (83 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (83 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv8_D8 : STD_LOGIC_VECTOR (7 downto 0) := "11011000";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_84 : STD_LOGIC_VECTOR (7 downto 0) := "10000100";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_A2 : STD_LOGIC_VECTOR (7 downto 0) := "10100010";
    constant ap_const_lv8_DA : STD_LOGIC_VECTOR (7 downto 0) := "11011010";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_anonymous_namespace_5_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_10_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_1_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_3_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_4_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_8_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_9_ce0 : STD_LOGIC;
    signal p_anonymous_namespace_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_p_write_162bytes_s_fu_98_ap_start : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_ap_done : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_ap_idle : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_ap_ready : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_162bytes_s_fu_98_p_ce0 : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_p_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_162bytes_s_fu_98_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_64bytes_s_fu_113_ap_start : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_ap_done : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_ap_idle : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_ap_ready : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_p_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_write_64bytes_s_fu_113_p_ce0 : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_p_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_64bytes_s_fu_113_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_16bytes_s_fu_128_ap_start : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_ap_done : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_ap_idle : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_ap_ready : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_p_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_p_write_16bytes_s_fu_128_p_ce0 : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_p_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_16bytes_s_fu_128_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_12bytes_s_fu_145_ap_start : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_ap_done : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_ap_idle : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_ap_ready : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_p_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_p_write_12bytes_s_fu_145_p_ce0 : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_p_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_12bytes_s_fu_145_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_5bytes_s_fu_160_ap_start : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_ap_done : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_ap_idle : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_ap_ready : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_5bytes_s_fu_160_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_word_s_fu_174_ap_start : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_ap_done : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_ap_idle : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_ap_ready : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_inf : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_p_write_word_s_fu_174_sec : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_word_s_fu_174_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_word_s_fu_174_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_word_s_fu_174_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_word_s_fu_174_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_word_s_fu_174_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_205_ap_start : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_ap_done : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_ap_idle : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_ap_ready : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_value_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_205_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_205_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_byte_s_fu_205_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_205_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_205_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_205_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_205_ap_ce : STD_LOGIC;
    signal grp_p_write_162bytes_s_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_p_write_64bytes_s_fu_113_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_p_write_16bytes_s_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_p_write_12bytes_s_fu_145_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_p_write_5bytes_s_fu_160_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_p_write_word_s_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (83 downto 0);

    component p_write_162bytes_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_64bytes_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_16bytes_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_12bytes_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_5bytes_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_word_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inf : IN STD_LOGIC_VECTOR (2 downto 0);
        sec : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_byte_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        JpegEncoder_outhebyte_last_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        value_r : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component p_write_jpeg_headcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_write_jpeg_headjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    p_anonymous_namespace_5_U : component p_write_jpeg_headcud
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_16bytes_s_fu_128_p_address0,
        ce0 => p_anonymous_namespace_5_ce0,
        q0 => p_anonymous_namespace_5_q0);

    p_anonymous_namespace_U : component p_write_jpeg_headdEe
    generic map (
        DataWidth => 8,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_12bytes_s_fu_145_p_address0,
        ce0 => p_anonymous_namespace_ce0,
        q0 => p_anonymous_namespace_q0);

    p_anonymous_namespace_10_U : component p_write_jpeg_headeOg
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_16bytes_s_fu_128_p_address0,
        ce0 => p_anonymous_namespace_10_ce0,
        q0 => p_anonymous_namespace_10_q0);

    p_anonymous_namespace_1_U : component p_write_jpeg_headfYi
    generic map (
        DataWidth => 8,
        AddressRange => 162,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_162bytes_s_fu_98_p_address0,
        ce0 => p_anonymous_namespace_1_ce0,
        q0 => p_anonymous_namespace_1_q0);

    p_anonymous_namespace_3_U : component p_write_jpeg_headg8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_16bytes_s_fu_128_p_address0,
        ce0 => p_anonymous_namespace_3_ce0,
        q0 => p_anonymous_namespace_3_q0);

    p_anonymous_namespace_4_U : component p_write_jpeg_headhbi
    generic map (
        DataWidth => 8,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_12bytes_s_fu_145_p_address0,
        ce0 => p_anonymous_namespace_4_ce0,
        q0 => p_anonymous_namespace_4_q0);

    p_anonymous_namespace_8_U : component p_write_jpeg_headibs
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_16bytes_s_fu_128_p_address0,
        ce0 => p_anonymous_namespace_8_ce0,
        q0 => p_anonymous_namespace_8_q0);

    p_anonymous_namespace_9_U : component p_write_jpeg_headjbC
    generic map (
        DataWidth => 8,
        AddressRange => 162,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_p_write_162bytes_s_fu_98_p_address0,
        ce0 => p_anonymous_namespace_9_ce0,
        q0 => p_anonymous_namespace_9_q0);

    grp_p_write_162bytes_s_fu_98 : component p_write_162bytes_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_162bytes_s_fu_98_ap_start,
        ap_done => grp_p_write_162bytes_s_fu_98_ap_done,
        ap_idle => grp_p_write_162bytes_s_fu_98_ap_idle,
        ap_ready => grp_p_write_162bytes_s_fu_98_ap_ready,
        p_address0 => grp_p_write_162bytes_s_fu_98_p_address0,
        p_ce0 => grp_p_write_162bytes_s_fu_98_p_ce0,
        p_q0 => grp_p_write_162bytes_s_fu_98_p_q0,
        jpeg_out_TDATA => grp_p_write_162bytes_s_fu_98_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_162bytes_s_fu_98_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_162bytes_s_fu_98_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_162bytes_s_fu_98_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_162bytes_s_fu_98_jpeg_out_TLAST);

    grp_p_write_64bytes_s_fu_113 : component p_write_64bytes_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_64bytes_s_fu_113_ap_start,
        ap_done => grp_p_write_64bytes_s_fu_113_ap_done,
        ap_idle => grp_p_write_64bytes_s_fu_113_ap_idle,
        ap_ready => grp_p_write_64bytes_s_fu_113_ap_ready,
        p_address0 => grp_p_write_64bytes_s_fu_113_p_address0,
        p_ce0 => grp_p_write_64bytes_s_fu_113_p_ce0,
        p_q0 => grp_p_write_64bytes_s_fu_113_p_q0,
        jpeg_out_TDATA => grp_p_write_64bytes_s_fu_113_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_64bytes_s_fu_113_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_64bytes_s_fu_113_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_64bytes_s_fu_113_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_64bytes_s_fu_113_jpeg_out_TLAST);

    grp_p_write_16bytes_s_fu_128 : component p_write_16bytes_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_16bytes_s_fu_128_ap_start,
        ap_done => grp_p_write_16bytes_s_fu_128_ap_done,
        ap_idle => grp_p_write_16bytes_s_fu_128_ap_idle,
        ap_ready => grp_p_write_16bytes_s_fu_128_ap_ready,
        p_address0 => grp_p_write_16bytes_s_fu_128_p_address0,
        p_ce0 => grp_p_write_16bytes_s_fu_128_p_ce0,
        p_q0 => grp_p_write_16bytes_s_fu_128_p_q0,
        jpeg_out_TDATA => grp_p_write_16bytes_s_fu_128_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_16bytes_s_fu_128_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_16bytes_s_fu_128_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_16bytes_s_fu_128_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_16bytes_s_fu_128_jpeg_out_TLAST);

    grp_p_write_12bytes_s_fu_145 : component p_write_12bytes_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_12bytes_s_fu_145_ap_start,
        ap_done => grp_p_write_12bytes_s_fu_145_ap_done,
        ap_idle => grp_p_write_12bytes_s_fu_145_ap_idle,
        ap_ready => grp_p_write_12bytes_s_fu_145_ap_ready,
        p_address0 => grp_p_write_12bytes_s_fu_145_p_address0,
        p_ce0 => grp_p_write_12bytes_s_fu_145_p_ce0,
        p_q0 => grp_p_write_12bytes_s_fu_145_p_q0,
        jpeg_out_TDATA => grp_p_write_12bytes_s_fu_145_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_12bytes_s_fu_145_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_12bytes_s_fu_145_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_12bytes_s_fu_145_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_12bytes_s_fu_145_jpeg_out_TLAST);

    grp_p_write_5bytes_s_fu_160 : component p_write_5bytes_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_5bytes_s_fu_160_ap_start,
        ap_done => grp_p_write_5bytes_s_fu_160_ap_done,
        ap_idle => grp_p_write_5bytes_s_fu_160_ap_idle,
        ap_ready => grp_p_write_5bytes_s_fu_160_ap_ready,
        jpeg_out_TDATA => grp_p_write_5bytes_s_fu_160_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_5bytes_s_fu_160_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_5bytes_s_fu_160_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_5bytes_s_fu_160_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_5bytes_s_fu_160_jpeg_out_TLAST);

    grp_p_write_word_s_fu_174 : component p_write_word_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_word_s_fu_174_ap_start,
        ap_done => grp_p_write_word_s_fu_174_ap_done,
        ap_idle => grp_p_write_word_s_fu_174_ap_idle,
        ap_ready => grp_p_write_word_s_fu_174_ap_ready,
        inf => grp_p_write_word_s_fu_174_inf,
        sec => grp_p_write_word_s_fu_174_sec,
        jpeg_out_TDATA => grp_p_write_word_s_fu_174_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_word_s_fu_174_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_word_s_fu_174_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_word_s_fu_174_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_word_s_fu_174_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_word_s_fu_174_jpeg_out_TLAST);

    grp_p_write_byte_s_fu_205 : component p_write_byte_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_byte_s_fu_205_ap_start,
        ap_done => grp_p_write_byte_s_fu_205_ap_done,
        ap_idle => grp_p_write_byte_s_fu_205_ap_idle,
        ap_ready => grp_p_write_byte_s_fu_205_ap_ready,
        JpegEncoder_outhebyte_last_V_read => ap_const_lv1_0,
        value_r => grp_p_write_byte_s_fu_205_value_r,
        jpeg_out_TDATA => grp_p_write_byte_s_fu_205_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_byte_s_fu_205_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_byte_s_fu_205_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_byte_s_fu_205_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_byte_s_fu_205_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_byte_s_fu_205_jpeg_out_TLAST,
        ap_return => grp_p_write_byte_s_fu_205_ap_return,
        jpeg_out_TDATA_blk_n => grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n,
        ap_ce => grp_p_write_byte_s_fu_205_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then 
                    ap_return_preg <= grp_p_write_byte_s_fu_205_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_12bytes_s_fu_145_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_12bytes_s_fu_145_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    grp_p_write_12bytes_s_fu_145_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_12bytes_s_fu_145_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_12bytes_s_fu_145_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_162bytes_s_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_162bytes_s_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                    grp_p_write_162bytes_s_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_162bytes_s_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_162bytes_s_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_16bytes_s_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_16bytes_s_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_p_write_16bytes_s_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_16bytes_s_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_16bytes_s_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_5bytes_s_fu_160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_5bytes_s_fu_160_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_p_write_5bytes_s_fu_160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_5bytes_s_fu_160_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_5bytes_s_fu_160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_64bytes_s_fu_113_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_64bytes_s_fu_113_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_p_write_64bytes_s_fu_113_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_64bytes_s_fu_113_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_64bytes_s_fu_113_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_write_word_s_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_write_word_s_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_p_write_word_s_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_write_word_s_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_p_write_word_s_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_ap_done, grp_p_write_64bytes_s_fu_113_ap_done, grp_p_write_16bytes_s_fu_128_ap_done, grp_p_write_12bytes_s_fu_145_ap_done, grp_p_write_5bytes_s_fu_160_ap_done, grp_p_write_word_s_fu_174_ap_done, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_p_write_5bytes_s_fu_160_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_p_write_64bytes_s_fu_113_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_p_write_64bytes_s_fu_113_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_p_write_16bytes_s_fu_128_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((grp_p_write_12bytes_s_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_p_write_16bytes_s_fu_128_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_p_write_162bytes_s_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((grp_p_write_16bytes_s_fu_128_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((grp_p_write_12bytes_s_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((grp_p_write_16bytes_s_fu_128_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((grp_p_write_162bytes_s_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_p_write_word_s_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    JpegEncoder_m_CbCrTable_address0 <= grp_p_write_64bytes_s_fu_113_p_address0;

    JpegEncoder_m_CbCrTable_ce0_assign_proc : process(grp_p_write_64bytes_s_fu_113_p_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            JpegEncoder_m_CbCrTable_ce0 <= grp_p_write_64bytes_s_fu_113_p_ce0;
        else 
            JpegEncoder_m_CbCrTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    JpegEncoder_m_YTable_address0 <= grp_p_write_64bytes_s_fu_113_p_address0;

    JpegEncoder_m_YTable_ce0_assign_proc : process(grp_p_write_64bytes_s_fu_113_p_ce0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            JpegEncoder_m_YTable_ce0 <= grp_p_write_64bytes_s_fu_113_p_ce0;
        else 
            JpegEncoder_m_YTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n, ap_CS_fsm_state84)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n, ap_CS_fsm_state84, grp_p_write_byte_s_fu_205_ap_return, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n = ap_const_logic_1))) then 
            ap_return <= grp_p_write_byte_s_fu_205_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_p_write_12bytes_s_fu_145_ap_start <= grp_p_write_12bytes_s_fu_145_ap_start_reg;
    grp_p_write_12bytes_s_fu_145_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state65) or (jpeg_out_TREADY and ap_CS_fsm_state55));

    grp_p_write_12bytes_s_fu_145_p_q0_assign_proc : process(p_anonymous_namespace_q0, p_anonymous_namespace_4_q0, ap_CS_fsm_state55, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_p_write_12bytes_s_fu_145_p_q0 <= p_anonymous_namespace_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_p_write_12bytes_s_fu_145_p_q0 <= p_anonymous_namespace_q0;
        else 
            grp_p_write_12bytes_s_fu_145_p_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_p_write_162bytes_s_fu_98_ap_start <= grp_p_write_162bytes_s_fu_98_ap_start_reg;
    grp_p_write_162bytes_s_fu_98_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state70) or (jpeg_out_TREADY and ap_CS_fsm_state60));

    grp_p_write_162bytes_s_fu_98_p_q0_assign_proc : process(p_anonymous_namespace_1_q0, p_anonymous_namespace_9_q0, ap_CS_fsm_state60, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_p_write_162bytes_s_fu_98_p_q0 <= p_anonymous_namespace_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_p_write_162bytes_s_fu_98_p_q0 <= p_anonymous_namespace_1_q0;
        else 
            grp_p_write_162bytes_s_fu_98_p_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_p_write_16bytes_s_fu_128_ap_start <= grp_p_write_16bytes_s_fu_128_ap_start_reg;
    grp_p_write_16bytes_s_fu_128_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state68) or (jpeg_out_TREADY and ap_CS_fsm_state63) or (jpeg_out_TREADY and ap_CS_fsm_state58) or (jpeg_out_TREADY and ap_CS_fsm_state53));

    grp_p_write_16bytes_s_fu_128_p_q0_assign_proc : process(p_anonymous_namespace_5_q0, p_anonymous_namespace_10_q0, p_anonymous_namespace_3_q0, p_anonymous_namespace_8_q0, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_p_write_16bytes_s_fu_128_p_q0 <= p_anonymous_namespace_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_p_write_16bytes_s_fu_128_p_q0 <= p_anonymous_namespace_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_p_write_16bytes_s_fu_128_p_q0 <= p_anonymous_namespace_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_p_write_16bytes_s_fu_128_p_q0 <= p_anonymous_namespace_5_q0;
        else 
            grp_p_write_16bytes_s_fu_128_p_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_p_write_5bytes_s_fu_160_ap_start <= grp_p_write_5bytes_s_fu_160_ap_start_reg;
    grp_p_write_5bytes_s_fu_160_jpeg_out_TREADY <= (jpeg_out_TREADY and ap_CS_fsm_state8);
    grp_p_write_64bytes_s_fu_113_ap_start <= grp_p_write_64bytes_s_fu_113_ap_start_reg;
    grp_p_write_64bytes_s_fu_113_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state27) or (jpeg_out_TREADY and ap_CS_fsm_state24));

    grp_p_write_64bytes_s_fu_113_p_q0_assign_proc : process(JpegEncoder_m_YTable_q0, JpegEncoder_m_CbCrTable_q0, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_p_write_64bytes_s_fu_113_p_q0 <= JpegEncoder_m_CbCrTable_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_p_write_64bytes_s_fu_113_p_q0 <= JpegEncoder_m_YTable_q0;
        else 
            grp_p_write_64bytes_s_fu_113_p_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_p_write_byte_s_fu_205_ap_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_p_write_byte_s_fu_205_ap_ce <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_205_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_p_write_byte_s_fu_205_ap_start_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_p_write_byte_s_fu_205_ap_start <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_205_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_write_byte_s_fu_205_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state84) or (jpeg_out_TREADY and ap_CS_fsm_state83) or (jpeg_out_TREADY and ap_CS_fsm_state82) or (jpeg_out_TREADY and ap_CS_fsm_state81) or (jpeg_out_TREADY and ap_CS_fsm_state80) or (jpeg_out_TREADY and ap_CS_fsm_state79) or (jpeg_out_TREADY and ap_CS_fsm_state78) or (jpeg_out_TREADY and ap_CS_fsm_state77) or (jpeg_out_TREADY and ap_CS_fsm_state76) or (jpeg_out_TREADY and ap_CS_fsm_state75) or (jpeg_out_TREADY and ap_CS_fsm_state66) or (jpeg_out_TREADY and ap_CS_fsm_state61) or (jpeg_out_TREADY and ap_CS_fsm_state56) or (jpeg_out_TREADY and ap_CS_fsm_state51) or (jpeg_out_TREADY and ap_CS_fsm_state46) or (jpeg_out_TREADY and ap_CS_fsm_state45) or (jpeg_out_TREADY and ap_CS_fsm_state44) or (jpeg_out_TREADY and ap_CS_fsm_state43) or (jpeg_out_TREADY and ap_CS_fsm_state42) or (jpeg_out_TREADY and ap_CS_fsm_state41) or (jpeg_out_TREADY and ap_CS_fsm_state40) or (jpeg_out_TREADY and ap_CS_fsm_state39) or (jpeg_out_TREADY and ap_CS_fsm_state38) or (jpeg_out_TREADY and ap_CS_fsm_state37) or (jpeg_out_TREADY and ap_CS_fsm_state32) or (jpeg_out_TREADY and ap_CS_fsm_state25) or (jpeg_out_TREADY and ap_CS_fsm_state22) or (jpeg_out_TREADY and ap_CS_fsm_state17) or (jpeg_out_TREADY and ap_CS_fsm_state16) or (jpeg_out_TREADY and ap_CS_fsm_state11) or (jpeg_out_TREADY and ap_CS_fsm_state10) or (jpeg_out_TREADY and ap_CS_fsm_state9));

    grp_p_write_byte_s_fu_205_value_r_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_3F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_11;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_p_write_byte_s_fu_205_value_r <= ap_const_lv8_1;
        else 
            grp_p_write_byte_s_fu_205_value_r <= "XXXXXXXX";
        end if; 
    end process;

    grp_p_write_word_s_fu_174_ap_start <= grp_p_write_word_s_fu_174_ap_start_reg;

    grp_p_write_word_s_fu_174_inf_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_p_write_word_s_fu_174_inf <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_p_write_word_s_fu_174_inf <= ap_const_lv3_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_p_write_word_s_fu_174_inf <= ap_const_lv3_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_p_write_word_s_fu_174_inf <= ap_const_lv3_7;
        else 
            grp_p_write_word_s_fu_174_inf <= "XXX";
        end if; 
    end process;

    grp_p_write_word_s_fu_174_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state74) or (jpeg_out_TREADY and ap_CS_fsm_state72) or (jpeg_out_TREADY and ap_CS_fsm_state50) or (jpeg_out_TREADY and ap_CS_fsm_state48) or (jpeg_out_TREADY and ap_CS_fsm_state36) or (jpeg_out_TREADY and ap_CS_fsm_state34) or (jpeg_out_TREADY and ap_CS_fsm_state31) or (jpeg_out_TREADY and ap_CS_fsm_state29) or (jpeg_out_TREADY and ap_CS_fsm_state21) or (jpeg_out_TREADY and ap_CS_fsm_state19) or (jpeg_out_TREADY and ap_CS_fsm_state15) or (jpeg_out_TREADY and ap_CS_fsm_state13) or (jpeg_out_TREADY and ap_CS_fsm_state6) or (jpeg_out_TREADY and ap_CS_fsm_state4) or (jpeg_out_TREADY and ap_CS_fsm_state2));

    grp_p_write_word_s_fu_174_sec_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_DA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_A2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_C4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_C0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_84;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_DB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_E0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_p_write_word_s_fu_174_sec <= ap_const_lv8_D8;
        else 
            grp_p_write_word_s_fu_174_sec <= "XXXXXXXX";
        end if; 
    end process;


    jpeg_out_TDATA_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_jpeg_out_TDATA, grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID, grp_p_write_64bytes_s_fu_113_jpeg_out_TDATA, grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID, grp_p_write_16bytes_s_fu_128_jpeg_out_TDATA, grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID, grp_p_write_12bytes_s_fu_145_jpeg_out_TDATA, grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID, grp_p_write_5bytes_s_fu_160_jpeg_out_TDATA, grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID, grp_p_write_word_s_fu_174_jpeg_out_TDATA, grp_p_write_word_s_fu_174_jpeg_out_TVALID, grp_p_write_byte_s_fu_205_jpeg_out_TDATA, grp_p_write_byte_s_fu_205_jpeg_out_TVALID, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            jpeg_out_TDATA <= grp_p_write_byte_s_fu_205_jpeg_out_TDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_word_s_fu_174_jpeg_out_TDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TDATA <= grp_p_write_5bytes_s_fu_160_jpeg_out_TDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_12bytes_s_fu_145_jpeg_out_TDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_16bytes_s_fu_128_jpeg_out_TDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_64bytes_s_fu_113_jpeg_out_TDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_162bytes_s_fu_98_jpeg_out_TDATA;
        else 
            jpeg_out_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    jpeg_out_TDATA_blk_n_assign_proc : process(grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            jpeg_out_TDATA_blk_n <= grp_p_write_byte_s_fu_205_jpeg_out_TDATA_blk_n;
        else 
            jpeg_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    jpeg_out_TKEEP_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID, grp_p_write_162bytes_s_fu_98_jpeg_out_TKEEP, grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID, grp_p_write_64bytes_s_fu_113_jpeg_out_TKEEP, grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID, grp_p_write_16bytes_s_fu_128_jpeg_out_TKEEP, grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID, grp_p_write_12bytes_s_fu_145_jpeg_out_TKEEP, grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID, grp_p_write_5bytes_s_fu_160_jpeg_out_TKEEP, grp_p_write_word_s_fu_174_jpeg_out_TVALID, grp_p_write_word_s_fu_174_jpeg_out_TKEEP, grp_p_write_byte_s_fu_205_jpeg_out_TVALID, grp_p_write_byte_s_fu_205_jpeg_out_TKEEP, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            jpeg_out_TKEEP <= grp_p_write_byte_s_fu_205_jpeg_out_TKEEP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_word_s_fu_174_jpeg_out_TKEEP;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TKEEP <= grp_p_write_5bytes_s_fu_160_jpeg_out_TKEEP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_12bytes_s_fu_145_jpeg_out_TKEEP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_16bytes_s_fu_128_jpeg_out_TKEEP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_64bytes_s_fu_113_jpeg_out_TKEEP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_162bytes_s_fu_98_jpeg_out_TKEEP;
        else 
            jpeg_out_TKEEP <= "X";
        end if; 
    end process;


    jpeg_out_TLAST_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID, grp_p_write_162bytes_s_fu_98_jpeg_out_TLAST, grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID, grp_p_write_64bytes_s_fu_113_jpeg_out_TLAST, grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID, grp_p_write_16bytes_s_fu_128_jpeg_out_TLAST, grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID, grp_p_write_12bytes_s_fu_145_jpeg_out_TLAST, grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID, grp_p_write_5bytes_s_fu_160_jpeg_out_TLAST, grp_p_write_word_s_fu_174_jpeg_out_TVALID, grp_p_write_word_s_fu_174_jpeg_out_TLAST, grp_p_write_byte_s_fu_205_jpeg_out_TVALID, grp_p_write_byte_s_fu_205_jpeg_out_TLAST, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            jpeg_out_TLAST <= grp_p_write_byte_s_fu_205_jpeg_out_TLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_word_s_fu_174_jpeg_out_TLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TLAST <= grp_p_write_5bytes_s_fu_160_jpeg_out_TLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_12bytes_s_fu_145_jpeg_out_TLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_16bytes_s_fu_128_jpeg_out_TLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_64bytes_s_fu_113_jpeg_out_TLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_162bytes_s_fu_98_jpeg_out_TLAST;
        else 
            jpeg_out_TLAST <= "X";
        end if; 
    end process;


    jpeg_out_TSTRB_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID, grp_p_write_162bytes_s_fu_98_jpeg_out_TSTRB, grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID, grp_p_write_64bytes_s_fu_113_jpeg_out_TSTRB, grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID, grp_p_write_16bytes_s_fu_128_jpeg_out_TSTRB, grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID, grp_p_write_12bytes_s_fu_145_jpeg_out_TSTRB, grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID, grp_p_write_5bytes_s_fu_160_jpeg_out_TSTRB, grp_p_write_word_s_fu_174_jpeg_out_TVALID, grp_p_write_word_s_fu_174_jpeg_out_TSTRB, grp_p_write_byte_s_fu_205_jpeg_out_TVALID, grp_p_write_byte_s_fu_205_jpeg_out_TSTRB, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if ((((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_p_write_byte_s_fu_205_jpeg_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            jpeg_out_TSTRB <= grp_p_write_byte_s_fu_205_jpeg_out_TSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_p_write_word_s_fu_174_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_word_s_fu_174_jpeg_out_TSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TSTRB <= grp_p_write_5bytes_s_fu_160_jpeg_out_TSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_12bytes_s_fu_145_jpeg_out_TSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_16bytes_s_fu_128_jpeg_out_TSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_64bytes_s_fu_113_jpeg_out_TSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_162bytes_s_fu_98_jpeg_out_TSTRB;
        else 
            jpeg_out_TSTRB <= "X";
        end if; 
    end process;


    jpeg_out_TVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID, grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID, grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID, grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID, grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID, grp_p_write_word_s_fu_174_jpeg_out_TVALID, grp_p_write_byte_s_fu_205_jpeg_out_TVALID, ap_CS_fsm_state60, ap_CS_fsm_state70, ap_CS_fsm_state24, ap_CS_fsm_state27, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state55, ap_CS_fsm_state65, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state72, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            jpeg_out_TVALID <= grp_p_write_byte_s_fu_205_jpeg_out_TVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            jpeg_out_TVALID <= grp_p_write_word_s_fu_174_jpeg_out_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            jpeg_out_TVALID <= grp_p_write_5bytes_s_fu_160_jpeg_out_TVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            jpeg_out_TVALID <= grp_p_write_12bytes_s_fu_145_jpeg_out_TVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            jpeg_out_TVALID <= grp_p_write_16bytes_s_fu_128_jpeg_out_TVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            jpeg_out_TVALID <= grp_p_write_64bytes_s_fu_113_jpeg_out_TVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            jpeg_out_TVALID <= grp_p_write_162bytes_s_fu_98_jpeg_out_TVALID;
        else 
            jpeg_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_10_ce0_assign_proc : process(grp_p_write_16bytes_s_fu_128_p_ce0, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            p_anonymous_namespace_10_ce0 <= grp_p_write_16bytes_s_fu_128_p_ce0;
        else 
            p_anonymous_namespace_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_1_ce0_assign_proc : process(grp_p_write_162bytes_s_fu_98_p_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            p_anonymous_namespace_1_ce0 <= grp_p_write_162bytes_s_fu_98_p_ce0;
        else 
            p_anonymous_namespace_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_3_ce0_assign_proc : process(grp_p_write_16bytes_s_fu_128_p_ce0, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            p_anonymous_namespace_3_ce0 <= grp_p_write_16bytes_s_fu_128_p_ce0;
        else 
            p_anonymous_namespace_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_4_ce0_assign_proc : process(grp_p_write_12bytes_s_fu_145_p_ce0, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            p_anonymous_namespace_4_ce0 <= grp_p_write_12bytes_s_fu_145_p_ce0;
        else 
            p_anonymous_namespace_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_5_ce0_assign_proc : process(grp_p_write_16bytes_s_fu_128_p_ce0, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            p_anonymous_namespace_5_ce0 <= grp_p_write_16bytes_s_fu_128_p_ce0;
        else 
            p_anonymous_namespace_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_8_ce0_assign_proc : process(grp_p_write_16bytes_s_fu_128_p_ce0, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            p_anonymous_namespace_8_ce0 <= grp_p_write_16bytes_s_fu_128_p_ce0;
        else 
            p_anonymous_namespace_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_9_ce0_assign_proc : process(grp_p_write_162bytes_s_fu_98_p_ce0, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            p_anonymous_namespace_9_ce0 <= grp_p_write_162bytes_s_fu_98_p_ce0;
        else 
            p_anonymous_namespace_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_anonymous_namespace_ce0_assign_proc : process(grp_p_write_12bytes_s_fu_145_p_ce0, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            p_anonymous_namespace_ce0 <= grp_p_write_12bytes_s_fu_145_p_ce0;
        else 
            p_anonymous_namespace_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
