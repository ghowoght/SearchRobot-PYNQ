// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_write_16bytes_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_q0,
        jpeg_out_TDATA,
        jpeg_out_TVALID,
        jpeg_out_TREADY,
        jpeg_out_TKEEP,
        jpeg_out_TSTRB,
        jpeg_out_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_address0;
output   p_ce0;
input  [7:0] p_q0;
output  [7:0] jpeg_out_TDATA;
output   jpeg_out_TVALID;
input   jpeg_out_TREADY;
output  [0:0] jpeg_out_TKEEP;
output  [0:0] jpeg_out_TSTRB;
output  [0:0] jpeg_out_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_ce0;
reg jpeg_out_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    jpeg_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [4:0] i_fu_88_p2;
reg   [4:0] i_reg_102;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln545_fu_82_p2;
reg   [4:0] i_0_reg_71;
wire   [63:0] zext_ln547_fu_94_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((jpeg_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_71 <= i_reg_102;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_71 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_102 <= i_fu_88_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln545_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln545_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        jpeg_out_TDATA_blk_n = jpeg_out_TREADY;
    end else begin
        jpeg_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((jpeg_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        jpeg_out_TVALID = 1'b1;
    end else begin
        jpeg_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln545_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((jpeg_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_fu_88_p2 = (i_0_reg_71 + 5'd1);

assign icmp_ln545_fu_82_p2 = ((i_0_reg_71 == 5'd16) ? 1'b1 : 1'b0);

assign jpeg_out_TDATA = p_q0;

assign jpeg_out_TKEEP = 1'd1;

assign jpeg_out_TLAST = 1'd0;

assign jpeg_out_TSTRB = 1'd0;

assign p_address0 = zext_ln547_fu_94_p1;

assign zext_ln547_fu_94_p1 = i_0_reg_71;

endmodule //p_write_16bytes_s
