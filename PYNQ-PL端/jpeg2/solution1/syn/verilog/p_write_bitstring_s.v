// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_write_bitstring_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        JpegEncoder_outhebyte_data_V_read,
        bs_length_address0,
        bs_length_ce0,
        bs_length_q0,
        bs_value_address0,
        bs_value_ce0,
        bs_value_q0,
        counts,
        newByte_read,
        newBytePos_read,
        jpeg_out_TDATA,
        jpeg_out_TVALID,
        jpeg_out_TREADY,
        jpeg_out_TKEEP,
        jpeg_out_TSTRB,
        jpeg_out_TLAST,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] JpegEncoder_outhebyte_data_V_read;
output  [6:0] bs_length_address0;
output   bs_length_ce0;
input  [31:0] bs_length_q0;
output  [6:0] bs_value_address0;
output   bs_value_ce0;
input  [31:0] bs_value_q0;
input  [31:0] counts;
input  [31:0] newByte_read;
input  [31:0] newBytePos_read;
output  [7:0] jpeg_out_TDATA;
output   jpeg_out_TVALID;
input   jpeg_out_TREADY;
output  [0:0] jpeg_out_TKEEP;
output  [0:0] jpeg_out_TSTRB;
output  [0:0] jpeg_out_TLAST;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [7:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bs_length_ce0;
reg bs_value_ce0;
reg jpeg_out_TVALID;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] mask1_address0;
reg    mask1_ce0;
wire   [15:0] mask1_q0;
wire    grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n;
reg    jpeg_out_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_1_reg_481;
reg   [0:0] icmp_ln602_reg_485;
wire   [30:0] i_fu_244_p2;
reg   [30:0] i_reg_420;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln583_fu_239_p2;
wire   [15:0] trunc_ln588_fu_277_p1;
reg   [15:0] trunc_ln588_reg_435;
wire    ap_CS_fsm_state3;
reg   [31:0] bs_length_load_reg_440;
wire   [31:0] posval_fu_281_p2;
reg   [31:0] posval_reg_445;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [15:0] mask1_load_reg_464;
wire   [31:0] select_ln592_fu_340_p3;
reg   [31:0] select_ln592_reg_474;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_1_fu_353_p3;
wire   [0:0] icmp_ln602_fu_374_p2;
reg    grp_p_write_byte_s_fu_193_ap_start;
wire    grp_p_write_byte_s_fu_193_ap_done;
wire    grp_p_write_byte_s_fu_193_ap_idle;
wire    grp_p_write_byte_s_fu_193_ap_ready;
reg   [7:0] grp_p_write_byte_s_fu_193_value_r;
wire   [7:0] grp_p_write_byte_s_fu_193_jpeg_out_TDATA;
wire    grp_p_write_byte_s_fu_193_jpeg_out_TVALID;
wire    grp_p_write_byte_s_fu_193_jpeg_out_TREADY;
wire   [0:0] grp_p_write_byte_s_fu_193_jpeg_out_TKEEP;
wire   [0:0] grp_p_write_byte_s_fu_193_jpeg_out_TSTRB;
wire   [0:0] grp_p_write_byte_s_fu_193_jpeg_out_TLAST;
wire   [7:0] grp_p_write_byte_s_fu_193_ap_return;
reg    grp_p_write_byte_s_fu_193_ap_ce;
reg    ap_predicate_op89_call_state11;
reg   [30:0] i_0_reg_173;
wire   [0:0] icmp_ln590_fu_287_p2;
reg   [31:0] posval_0_in_reg_184;
wire    ap_CS_fsm_state4;
reg    ap_block_state11;
wire   [7:0] trunc_ln601_fu_370_p1;
wire   [63:0] zext_ln588_fu_250_p1;
wire   [63:0] zext_ln592_fu_293_p1;
wire  signed [63:0] sext_ln594_fu_297_p1;
reg   [7:0] JpegEncoder_outhebyt_fu_90;
reg   [31:0] newBytePos_0_fu_94;
wire   [31:0] add_ln597_fu_348_p2;
reg   [31:0] newByte_0_fu_98;
wire    ap_CS_fsm_state9;
wire   [31:0] zext_ln583_fu_235_p1;
wire  signed [31:0] sext_ln594_fu_297_p0;
wire   [15:0] and_ln592_fu_302_p2;
wire   [15:0] trunc_ln594_fu_312_p1;
wire   [15:0] tmp_3_fu_322_p4;
wire   [15:0] or_ln594_fu_316_p2;
wire   [0:0] icmp_ln592_fu_306_p2;
wire   [31:0] or_ln_fu_332_p3;
wire  signed [31:0] add_ln597_fu_348_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

p_write_bitstringEe0 #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
mask1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask1_address0),
    .ce0(mask1_ce0),
    .q0(mask1_q0)
);

p_write_byte_s grp_p_write_byte_s_fu_193(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_p_write_byte_s_fu_193_ap_start),
    .ap_done(grp_p_write_byte_s_fu_193_ap_done),
    .ap_idle(grp_p_write_byte_s_fu_193_ap_idle),
    .ap_ready(grp_p_write_byte_s_fu_193_ap_ready),
    .JpegEncoder_outhebyte_last_V_read(1'd0),
    .value_r(grp_p_write_byte_s_fu_193_value_r),
    .jpeg_out_TDATA(grp_p_write_byte_s_fu_193_jpeg_out_TDATA),
    .jpeg_out_TVALID(grp_p_write_byte_s_fu_193_jpeg_out_TVALID),
    .jpeg_out_TREADY(grp_p_write_byte_s_fu_193_jpeg_out_TREADY),
    .jpeg_out_TKEEP(grp_p_write_byte_s_fu_193_jpeg_out_TKEEP),
    .jpeg_out_TSTRB(grp_p_write_byte_s_fu_193_jpeg_out_TSTRB),
    .jpeg_out_TLAST(grp_p_write_byte_s_fu_193_jpeg_out_TLAST),
    .ap_return(grp_p_write_byte_s_fu_193_ap_return),
    .jpeg_out_TDATA_blk_n(grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n),
    .ap_ce(grp_p_write_byte_s_fu_193_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((~((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b0) & (ap_predicate_op89_call_state11 == 1'b1)) & (icmp_ln602_reg_485 == 1'd1) & (tmp_1_reg_481 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln602_fu_374_p2 == 1'd0)))) begin
        JpegEncoder_outhebyt_fu_90 <= grp_p_write_byte_s_fu_193_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        JpegEncoder_outhebyt_fu_90 <= JpegEncoder_outhebyte_data_V_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln590_fu_287_p2 == 1'd0))) begin
        i_0_reg_173 <= i_reg_420;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_173 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        newBytePos_0_fu_94 <= 32'd7;
    end else if (((1'b1 == ap_CS_fsm_state8) & (tmp_1_fu_353_p3 == 1'd0))) begin
        newBytePos_0_fu_94 <= add_ln597_fu_348_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        newBytePos_0_fu_94 <= newBytePos_read;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        newByte_0_fu_98 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        newByte_0_fu_98 <= select_ln592_reg_474;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        newByte_0_fu_98 <= newByte_read;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b0) & (ap_predicate_op89_call_state11 == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
        posval_0_in_reg_184 <= posval_reg_445;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        posval_0_in_reg_184 <= bs_length_load_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bs_length_load_reg_440 <= bs_length_q0;
        trunc_ln588_reg_435 <= trunc_ln588_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_420 <= i_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        icmp_ln602_reg_485 <= icmp_ln602_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mask1_load_reg_464 <= mask1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        posval_reg_445 <= posval_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln592_reg_474 <= select_ln592_fu_340_p3;
        tmp_1_reg_481 <= add_ln597_fu_348_p2[32'd31];
    end
end

always @ (*) begin
    if ((((icmp_ln583_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln583_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bs_length_ce0 = 1'b1;
    end else begin
        bs_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bs_value_ce0 = 1'b1;
    end else begin
        bs_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_p_write_byte_s_fu_193_ap_ce = 1'b1;
    end else begin
        grp_p_write_byte_s_fu_193_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state11) & (ap_predicate_op89_call_state11 == 1'b1)))) begin
        grp_p_write_byte_s_fu_193_ap_start = 1'b1;
    end else begin
        grp_p_write_byte_s_fu_193_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (ap_predicate_op89_call_state11 == 1'b1))) begin
        grp_p_write_byte_s_fu_193_value_r = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_p_write_byte_s_fu_193_value_r = trunc_ln601_fu_370_p1;
    end else begin
        grp_p_write_byte_s_fu_193_value_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln602_reg_485 == 1'd1) & (tmp_1_reg_481 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        jpeg_out_TDATA_blk_n = grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n;
    end else begin
        jpeg_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state11) & (ap_predicate_op89_call_state11 == 1'b1)))) begin
        jpeg_out_TVALID = grp_p_write_byte_s_fu_193_jpeg_out_TVALID;
    end else begin
        jpeg_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mask1_address0 = sext_ln594_fu_297_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mask1_address0 = zext_ln592_fu_293_p1;
    end else begin
        mask1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        mask1_ce0 = 1'b1;
    end else begin
        mask1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln583_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln590_fu_287_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_1_fu_353_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b0) & (ap_predicate_op89_call_state11 == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln597_fu_348_p1 = newBytePos_0_fu_94;

assign add_ln597_fu_348_p2 = ($signed(32'd4294967295) + $signed(add_ln597_fu_348_p1));

assign and_ln592_fu_302_p2 = (trunc_ln588_reg_435 & mask1_load_reg_464);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n == 1'b0) & (ap_predicate_op89_call_state11 == 1'b1));
end

always @ (*) begin
    ap_predicate_op89_call_state11 = ((icmp_ln602_reg_485 == 1'd1) & (tmp_1_reg_481 == 1'd1));
end

assign ap_return_0 = newByte_0_fu_98;

assign ap_return_1 = newBytePos_0_fu_94;

assign ap_return_2 = JpegEncoder_outhebyt_fu_90;

assign bs_length_address0 = zext_ln588_fu_250_p1;

assign bs_value_address0 = zext_ln588_fu_250_p1;

assign grp_p_write_byte_s_fu_193_jpeg_out_TREADY = ((jpeg_out_TREADY & ap_CS_fsm_state11) | (jpeg_out_TREADY & ap_CS_fsm_state10));

assign i_fu_244_p2 = (i_0_reg_173 + 31'd1);

assign icmp_ln583_fu_239_p2 = (($signed(zext_ln583_fu_235_p1) < $signed(counts)) ? 1'b1 : 1'b0);

assign icmp_ln590_fu_287_p2 = (($signed(posval_0_in_reg_184) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_306_p2 = ((and_ln592_fu_302_p2 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln602_fu_374_p2 = ((select_ln592_reg_474 == 32'd255) ? 1'b1 : 1'b0);

assign jpeg_out_TDATA = grp_p_write_byte_s_fu_193_jpeg_out_TDATA;

assign jpeg_out_TKEEP = grp_p_write_byte_s_fu_193_jpeg_out_TKEEP;

assign jpeg_out_TLAST = grp_p_write_byte_s_fu_193_jpeg_out_TLAST;

assign jpeg_out_TSTRB = grp_p_write_byte_s_fu_193_jpeg_out_TSTRB;

assign or_ln594_fu_316_p2 = (trunc_ln594_fu_312_p1 | mask1_q0);

assign or_ln_fu_332_p3 = {{tmp_3_fu_322_p4}, {or_ln594_fu_316_p2}};

assign posval_fu_281_p2 = ($signed(posval_0_in_reg_184) + $signed(32'd4294967295));

assign select_ln592_fu_340_p3 = ((icmp_ln592_fu_306_p2[0:0] === 1'b1) ? newByte_0_fu_98 : or_ln_fu_332_p3);

assign sext_ln594_fu_297_p0 = newBytePos_0_fu_94;

assign sext_ln594_fu_297_p1 = sext_ln594_fu_297_p0;

assign tmp_1_fu_353_p3 = add_ln597_fu_348_p2[32'd31];

assign tmp_3_fu_322_p4 = {{newByte_0_fu_98[31:16]}};

assign trunc_ln588_fu_277_p1 = bs_value_q0[15:0];

assign trunc_ln594_fu_312_p1 = newByte_0_fu_98[15:0];

assign trunc_ln601_fu_370_p1 = select_ln592_reg_474[7:0];

assign zext_ln583_fu_235_p1 = i_0_reg_173;

assign zext_ln588_fu_250_p1 = i_0_reg_173;

assign zext_ln592_fu_293_p1 = posval_reg_445;

endmodule //p_write_bitstring_s
