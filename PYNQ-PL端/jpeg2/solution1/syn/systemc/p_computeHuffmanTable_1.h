// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _p_computeHuffmanTable_1_HH_
#define _p_computeHuffmanTable_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct p_computeHuffmanTable_1 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > nr_codes_address0;
    sc_out< sc_logic > nr_codes_ce0;
    sc_in< sc_lv<8> > nr_codes_q0;
    sc_out< sc_lv<4> > std_table_address0;
    sc_out< sc_logic > std_table_ce0;
    sc_in< sc_lv<8> > std_table_q0;
    sc_out< sc_lv<4> > huffman_table_length_address0;
    sc_out< sc_logic > huffman_table_length_ce0;
    sc_out< sc_logic > huffman_table_length_we0;
    sc_out< sc_lv<5> > huffman_table_length_d0;
    sc_out< sc_lv<4> > huffman_table_value_address0;
    sc_out< sc_logic > huffman_table_value_ce0;
    sc_out< sc_logic > huffman_table_value_we0;
    sc_out< sc_lv<16> > huffman_table_value_d0;


    // Module declarations
    p_computeHuffmanTable_1(sc_module_name name);
    SC_HAS_PROCESS(p_computeHuffmanTable_1);

    ~p_computeHuffmanTable_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > nr_codes_addr_reg_240;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln315_fu_156_p2;
    sc_signal< sc_lv<8> > nr_codes_load_reg_245;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln317_fu_176_p2;
    sc_signal< sc_lv<32> > j_fu_196_p2;
    sc_signal< sc_lv<32> > j_reg_258;
    sc_signal< sc_lv<16> > code_value_fu_207_p2;
    sc_signal< sc_lv<5> > k_fu_213_p2;
    sc_signal< sc_lv<8> > std_table_load_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<16> > code_value_2_fu_224_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<16> > code_value_0_reg_103;
    sc_signal< sc_lv<5> > k_0_reg_115;
    sc_signal< sc_lv<16> > code_value_1_reg_128;
    sc_signal< sc_lv<32> > j_0_reg_140;
    sc_signal< sc_lv<64> > zext_ln317_1_fu_168_p1;
    sc_signal< sc_lv<64> > zext_ln319_fu_185_p1;
    sc_signal< sc_lv<64> > zext_ln319_1_fu_219_p1;
    sc_signal< sc_lv<8> > pos_in_table_1_fu_48;
    sc_signal< sc_lv<8> > pos_in_table_fu_190_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > add_ln317_fu_162_p2;
    sc_signal< sc_lv<32> > zext_ln317_fu_173_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_11;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<16> ap_const_lv16_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln317_fu_162_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_code_value_2_fu_224_p2();
    void thread_code_value_fu_207_p2();
    void thread_huffman_table_length_address0();
    void thread_huffman_table_length_ce0();
    void thread_huffman_table_length_d0();
    void thread_huffman_table_length_we0();
    void thread_huffman_table_value_address0();
    void thread_huffman_table_value_ce0();
    void thread_huffman_table_value_d0();
    void thread_huffman_table_value_we0();
    void thread_icmp_ln315_fu_156_p2();
    void thread_icmp_ln317_fu_176_p2();
    void thread_j_fu_196_p2();
    void thread_k_fu_213_p2();
    void thread_nr_codes_address0();
    void thread_nr_codes_ce0();
    void thread_pos_in_table_fu_190_p2();
    void thread_std_table_address0();
    void thread_std_table_ce0();
    void thread_zext_ln317_1_fu_168_p1();
    void thread_zext_ln317_fu_173_p1();
    void thread_zext_ln319_1_fu_219_p1();
    void thread_zext_ln319_fu_185_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
