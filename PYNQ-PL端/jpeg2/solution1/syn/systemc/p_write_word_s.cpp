// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "p_write_word_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic p_write_word_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic p_write_word_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> p_write_word_s::ap_ST_fsm_state1 = "1";
const sc_lv<2> p_write_word_s::ap_ST_fsm_state2 = "10";
const sc_lv<32> p_write_word_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> p_write_word_s::ap_const_lv32_1 = "1";
const sc_lv<1> p_write_word_s::ap_const_lv1_1 = "1";
const sc_lv<1> p_write_word_s::ap_const_lv1_0 = "0";
const bool p_write_word_s::ap_const_boolean_1 = true;

p_write_word_s::p_write_word_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jpeg_out_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( jpeg_out_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_jpeg_out_TDATA);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sec );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_data_V_fu_64_p1 );

    SC_METHOD(thread_jpeg_out_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jpeg_out_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_jpeg_out_TKEEP);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_jpeg_out_TLAST);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_jpeg_out_TSTRB);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_jpeg_out_TVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jpeg_out_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_data_V_fu_64_p1);
    sensitive << ( inf );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jpeg_out_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "p_write_word_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inf, "(port)inf");
    sc_trace(mVcdFile, sec, "(port)sec");
    sc_trace(mVcdFile, jpeg_out_TDATA, "(port)jpeg_out_TDATA");
    sc_trace(mVcdFile, jpeg_out_TVALID, "(port)jpeg_out_TVALID");
    sc_trace(mVcdFile, jpeg_out_TREADY, "(port)jpeg_out_TREADY");
    sc_trace(mVcdFile, jpeg_out_TKEEP, "(port)jpeg_out_TKEEP");
    sc_trace(mVcdFile, jpeg_out_TSTRB, "(port)jpeg_out_TSTRB");
    sc_trace(mVcdFile, jpeg_out_TLAST, "(port)jpeg_out_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, jpeg_out_TDATA_blk_n, "jpeg_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_data_V_fu_64_p1, "tmp_data_V_fu_64_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

p_write_word_s::~p_write_word_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void p_write_word_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void p_write_word_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void p_write_word_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void p_write_word_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(jpeg_out_TREADY.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void p_write_word_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void p_write_word_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(jpeg_out_TREADY.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void p_write_word_s::thread_jpeg_out_TDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        jpeg_out_TDATA = sec.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        jpeg_out_TDATA = tmp_data_V_fu_64_p1.read();
    } else {
        jpeg_out_TDATA = "XXXXXXXX";
    }
}

void p_write_word_s::thread_jpeg_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        jpeg_out_TDATA_blk_n = jpeg_out_TREADY.read();
    } else {
        jpeg_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void p_write_word_s::thread_jpeg_out_TKEEP() {
    jpeg_out_TKEEP = ap_const_lv1_1;
}

void p_write_word_s::thread_jpeg_out_TLAST() {
    jpeg_out_TLAST = ap_const_lv1_0;
}

void p_write_word_s::thread_jpeg_out_TSTRB() {
    jpeg_out_TSTRB = ap_const_lv1_0;
}

void p_write_word_s::thread_jpeg_out_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, jpeg_out_TREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(jpeg_out_TREADY.read(), ap_const_logic_1)))) {
        jpeg_out_TVALID = ap_const_logic_1;
    } else {
        jpeg_out_TVALID = ap_const_logic_0;
    }
}

void p_write_word_s::thread_tmp_data_V_fu_64_p1() {
    tmp_data_V_fu_64_p1 = esl_sext<8,3>(inf.read());
}

void p_write_word_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, jpeg_out_TREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(jpeg_out_TREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

