// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "p_computeHuffmanTable_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic p_computeHuffmanTable_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic p_computeHuffmanTable_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state1 = "1";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state2 = "10";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state3 = "100";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state4 = "1000";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state5 = "10000";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state6 = "100000";
const sc_lv<7> p_computeHuffmanTable_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_1 = "1";
const sc_lv<1> p_computeHuffmanTable_1::ap_const_lv1_0 = "0";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_3 = "11";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_4 = "100";
const sc_lv<1> p_computeHuffmanTable_1::ap_const_lv1_1 = "1";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_5 = "101";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_6 = "110";
const sc_lv<16> p_computeHuffmanTable_1::ap_const_lv16_0 = "0000000000000000";
const sc_lv<5> p_computeHuffmanTable_1::ap_const_lv5_1 = "1";
const sc_lv<8> p_computeHuffmanTable_1::ap_const_lv8_0 = "00000000";
const sc_lv<32> p_computeHuffmanTable_1::ap_const_lv32_2 = "10";
const sc_lv<5> p_computeHuffmanTable_1::ap_const_lv5_11 = "10001";
const sc_lv<5> p_computeHuffmanTable_1::ap_const_lv5_1F = "11111";
const sc_lv<8> p_computeHuffmanTable_1::ap_const_lv8_1 = "1";
const sc_lv<16> p_computeHuffmanTable_1::ap_const_lv16_1 = "1";
const bool p_computeHuffmanTable_1::ap_const_boolean_1 = true;

p_computeHuffmanTable_1::p_computeHuffmanTable_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln317_fu_162_p2);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln315_fu_156_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln315_fu_156_p2 );

    SC_METHOD(thread_code_value_2_fu_224_p2);
    sensitive << ( code_value_1_reg_128 );

    SC_METHOD(thread_code_value_fu_207_p2);
    sensitive << ( code_value_1_reg_128 );

    SC_METHOD(thread_huffman_table_length_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln319_1_fu_219_p1 );

    SC_METHOD(thread_huffman_table_length_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_huffman_table_length_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_huffman_table_length_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_huffman_table_value_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln319_1_fu_219_p1 );

    SC_METHOD(thread_huffman_table_value_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_huffman_table_value_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( code_value_1_reg_128 );

    SC_METHOD(thread_huffman_table_value_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln315_fu_156_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_icmp_ln317_fu_176_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_0_reg_140 );
    sensitive << ( zext_ln317_fu_173_p1 );

    SC_METHOD(thread_j_fu_196_p2);
    sensitive << ( j_0_reg_140 );

    SC_METHOD(thread_k_fu_213_p2);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_nr_codes_address0);
    sensitive << ( nr_codes_addr_reg_240 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_nr_codes_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pos_in_table_fu_190_p2);
    sensitive << ( pos_in_table_1_fu_48 );

    SC_METHOD(thread_std_table_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln319_fu_185_p1 );

    SC_METHOD(thread_std_table_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_zext_ln317_1_fu_168_p1);
    sensitive << ( add_ln317_fu_162_p2 );

    SC_METHOD(thread_zext_ln317_fu_173_p1);
    sensitive << ( nr_codes_load_reg_245 );

    SC_METHOD(thread_zext_ln319_1_fu_219_p1);
    sensitive << ( std_table_load_reg_273 );

    SC_METHOD(thread_zext_ln319_fu_185_p1);
    sensitive << ( pos_in_table_1_fu_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln315_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln317_fu_176_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "p_computeHuffmanTable_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, nr_codes_address0, "(port)nr_codes_address0");
    sc_trace(mVcdFile, nr_codes_ce0, "(port)nr_codes_ce0");
    sc_trace(mVcdFile, nr_codes_q0, "(port)nr_codes_q0");
    sc_trace(mVcdFile, std_table_address0, "(port)std_table_address0");
    sc_trace(mVcdFile, std_table_ce0, "(port)std_table_ce0");
    sc_trace(mVcdFile, std_table_q0, "(port)std_table_q0");
    sc_trace(mVcdFile, huffman_table_length_address0, "(port)huffman_table_length_address0");
    sc_trace(mVcdFile, huffman_table_length_ce0, "(port)huffman_table_length_ce0");
    sc_trace(mVcdFile, huffman_table_length_we0, "(port)huffman_table_length_we0");
    sc_trace(mVcdFile, huffman_table_length_d0, "(port)huffman_table_length_d0");
    sc_trace(mVcdFile, huffman_table_value_address0, "(port)huffman_table_value_address0");
    sc_trace(mVcdFile, huffman_table_value_ce0, "(port)huffman_table_value_ce0");
    sc_trace(mVcdFile, huffman_table_value_we0, "(port)huffman_table_value_we0");
    sc_trace(mVcdFile, huffman_table_value_d0, "(port)huffman_table_value_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, nr_codes_addr_reg_240, "nr_codes_addr_reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln315_fu_156_p2, "icmp_ln315_fu_156_p2");
    sc_trace(mVcdFile, nr_codes_load_reg_245, "nr_codes_load_reg_245");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln317_fu_176_p2, "icmp_ln317_fu_176_p2");
    sc_trace(mVcdFile, j_fu_196_p2, "j_fu_196_p2");
    sc_trace(mVcdFile, j_reg_258, "j_reg_258");
    sc_trace(mVcdFile, code_value_fu_207_p2, "code_value_fu_207_p2");
    sc_trace(mVcdFile, k_fu_213_p2, "k_fu_213_p2");
    sc_trace(mVcdFile, std_table_load_reg_273, "std_table_load_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, code_value_2_fu_224_p2, "code_value_2_fu_224_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, code_value_0_reg_103, "code_value_0_reg_103");
    sc_trace(mVcdFile, k_0_reg_115, "k_0_reg_115");
    sc_trace(mVcdFile, code_value_1_reg_128, "code_value_1_reg_128");
    sc_trace(mVcdFile, j_0_reg_140, "j_0_reg_140");
    sc_trace(mVcdFile, zext_ln317_1_fu_168_p1, "zext_ln317_1_fu_168_p1");
    sc_trace(mVcdFile, zext_ln319_fu_185_p1, "zext_ln319_fu_185_p1");
    sc_trace(mVcdFile, zext_ln319_1_fu_219_p1, "zext_ln319_1_fu_219_p1");
    sc_trace(mVcdFile, pos_in_table_1_fu_48, "pos_in_table_1_fu_48");
    sc_trace(mVcdFile, pos_in_table_fu_190_p2, "pos_in_table_fu_190_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln317_fu_162_p2, "add_ln317_fu_162_p2");
    sc_trace(mVcdFile, zext_ln317_fu_173_p1, "zext_ln317_fu_173_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

p_computeHuffmanTable_1::~p_computeHuffmanTable_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void p_computeHuffmanTable_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln317_fu_176_p2.read(), ap_const_lv1_1))) {
        code_value_0_reg_103 = code_value_fu_207_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        code_value_0_reg_103 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        code_value_1_reg_128 = code_value_2_fu_224_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_0))) {
        code_value_1_reg_128 = code_value_0_reg_103.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_reg_140 = j_reg_258.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_0))) {
        j_0_reg_140 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln317_fu_176_p2.read(), ap_const_lv1_1))) {
        k_0_reg_115 = k_fu_213_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_115 = ap_const_lv5_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_176_p2.read()))) {
        pos_in_table_1_fu_48 = pos_in_table_fu_190_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pos_in_table_1_fu_48 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_176_p2.read()))) {
        j_reg_258 = j_fu_196_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_0))) {
        nr_codes_addr_reg_240 =  (sc_lv<4>) (zext_ln317_1_fu_168_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        nr_codes_load_reg_245 = nr_codes_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        std_table_load_reg_273 = std_table_q0.read();
    }
}

void p_computeHuffmanTable_1::thread_add_ln317_fu_162_p2() {
    add_ln317_fu_162_p2 = (!k_0_reg_115.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(k_0_reg_115.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void p_computeHuffmanTable_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void p_computeHuffmanTable_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_code_value_2_fu_224_p2() {
    code_value_2_fu_224_p2 = (!code_value_1_reg_128.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(code_value_1_reg_128.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void p_computeHuffmanTable_1::thread_code_value_fu_207_p2() {
    code_value_fu_207_p2 = (!ap_const_lv16_1.is_01())? sc_lv<16>(): code_value_1_reg_128.read() << (unsigned short)ap_const_lv16_1.to_uint();
}

void p_computeHuffmanTable_1::thread_huffman_table_length_address0() {
    huffman_table_length_address0 =  (sc_lv<4>) (zext_ln319_1_fu_219_p1.read());
}

void p_computeHuffmanTable_1::thread_huffman_table_length_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        huffman_table_length_ce0 = ap_const_logic_1;
    } else {
        huffman_table_length_ce0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_huffman_table_length_d0() {
    huffman_table_length_d0 = k_0_reg_115.read();
}

void p_computeHuffmanTable_1::thread_huffman_table_length_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        huffman_table_length_we0 = ap_const_logic_1;
    } else {
        huffman_table_length_we0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_huffman_table_value_address0() {
    huffman_table_value_address0 =  (sc_lv<4>) (zext_ln319_1_fu_219_p1.read());
}

void p_computeHuffmanTable_1::thread_huffman_table_value_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        huffman_table_value_ce0 = ap_const_logic_1;
    } else {
        huffman_table_value_ce0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_huffman_table_value_d0() {
    huffman_table_value_d0 = code_value_1_reg_128.read();
}

void p_computeHuffmanTable_1::thread_huffman_table_value_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        huffman_table_value_we0 = ap_const_logic_1;
    } else {
        huffman_table_value_we0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_icmp_ln315_fu_156_p2() {
    icmp_ln315_fu_156_p2 = (!k_0_reg_115.read().is_01() || !ap_const_lv5_11.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_115.read() == ap_const_lv5_11);
}

void p_computeHuffmanTable_1::thread_icmp_ln317_fu_176_p2() {
    icmp_ln317_fu_176_p2 = (!j_0_reg_140.read().is_01() || !zext_ln317_fu_173_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_0_reg_140.read()) > sc_bigint<32>(zext_ln317_fu_173_p1.read()));
}

void p_computeHuffmanTable_1::thread_j_fu_196_p2() {
    j_fu_196_p2 = (!j_0_reg_140.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(j_0_reg_140.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void p_computeHuffmanTable_1::thread_k_fu_213_p2() {
    k_fu_213_p2 = (!ap_const_lv5_1.is_01() || !k_0_reg_115.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_1) + sc_biguint<5>(k_0_reg_115.read()));
}

void p_computeHuffmanTable_1::thread_nr_codes_address0() {
    nr_codes_address0 = nr_codes_addr_reg_240.read();
}

void p_computeHuffmanTable_1::thread_nr_codes_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        nr_codes_ce0 = ap_const_logic_1;
    } else {
        nr_codes_ce0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_pos_in_table_fu_190_p2() {
    pos_in_table_fu_190_p2 = (!pos_in_table_1_fu_48.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(pos_in_table_1_fu_48.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void p_computeHuffmanTable_1::thread_std_table_address0() {
    std_table_address0 =  (sc_lv<4>) (zext_ln319_fu_185_p1.read());
}

void p_computeHuffmanTable_1::thread_std_table_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        std_table_ce0 = ap_const_logic_1;
    } else {
        std_table_ce0 = ap_const_logic_0;
    }
}

void p_computeHuffmanTable_1::thread_zext_ln317_1_fu_168_p1() {
    zext_ln317_1_fu_168_p1 = esl_zext<64,5>(add_ln317_fu_162_p2.read());
}

void p_computeHuffmanTable_1::thread_zext_ln317_fu_173_p1() {
    zext_ln317_fu_173_p1 = esl_zext<32,8>(nr_codes_load_reg_245.read());
}

void p_computeHuffmanTable_1::thread_zext_ln319_1_fu_219_p1() {
    zext_ln319_1_fu_219_p1 = esl_zext<64,8>(std_table_load_reg_273.read());
}

void p_computeHuffmanTable_1::thread_zext_ln319_fu_185_p1() {
    zext_ln319_fu_185_p1 = esl_zext<64,8>(pos_in_table_1_fu_48.read());
}

void p_computeHuffmanTable_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln315_fu_156_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln317_fu_176_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

