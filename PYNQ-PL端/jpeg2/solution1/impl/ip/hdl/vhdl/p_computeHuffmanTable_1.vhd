-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_computeHuffmanTable_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nr_codes_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    nr_codes_ce0 : OUT STD_LOGIC;
    nr_codes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    std_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    std_table_ce0 : OUT STD_LOGIC;
    std_table_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    huffman_table_length_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    huffman_table_length_ce0 : OUT STD_LOGIC;
    huffman_table_length_we0 : OUT STD_LOGIC;
    huffman_table_length_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    huffman_table_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    huffman_table_value_ce0 : OUT STD_LOGIC;
    huffman_table_value_we0 : OUT STD_LOGIC;
    huffman_table_value_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of p_computeHuffmanTable_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nr_codes_addr_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln315_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nr_codes_load_reg_245 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln317_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_value_fu_207_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_fu_213_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal std_table_load_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal code_value_2_fu_224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal code_value_0_reg_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_0_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_value_1_reg_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln317_1_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_1_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_in_table_1_fu_48 : STD_LOGIC_VECTOR (7 downto 0);
    signal pos_in_table_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln317_fu_162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln317_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    code_value_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln317_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                                code_value_0_reg_103(15 downto 1) <= code_value_fu_207_p2(15 downto 1);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                code_value_0_reg_103(1) <= '0';
                code_value_0_reg_103(2) <= '0';
                code_value_0_reg_103(3) <= '0';
                code_value_0_reg_103(4) <= '0';
                code_value_0_reg_103(5) <= '0';
                code_value_0_reg_103(6) <= '0';
                code_value_0_reg_103(7) <= '0';
                code_value_0_reg_103(8) <= '0';
                code_value_0_reg_103(9) <= '0';
                code_value_0_reg_103(10) <= '0';
                code_value_0_reg_103(11) <= '0';
                code_value_0_reg_103(12) <= '0';
                code_value_0_reg_103(13) <= '0';
                code_value_0_reg_103(14) <= '0';
                code_value_0_reg_103(15) <= '0';
            end if; 
        end if;
    end process;

    code_value_1_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                code_value_1_reg_128 <= code_value_2_fu_224_p2;
            elsif (((icmp_ln315_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                code_value_1_reg_128 <= code_value_0_reg_103;
            end if; 
        end if;
    end process;

    j_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_140 <= j_reg_258;
            elsif (((icmp_ln315_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_140 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    k_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln317_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_reg_115 <= k_fu_213_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_115 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    pos_in_table_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln317_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pos_in_table_1_fu_48 <= pos_in_table_fu_190_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_in_table_1_fu_48 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln317_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_reg_258 <= j_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln315_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                nr_codes_addr_reg_240 <= zext_ln317_1_fu_168_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                nr_codes_load_reg_245 <= nr_codes_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                std_table_load_reg_273 <= std_table_q0;
            end if;
        end if;
    end process;
    code_value_0_reg_103(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln315_fu_156_p2, ap_CS_fsm_state5, icmp_ln317_fu_176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln315_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln317_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln317_fu_162_p2 <= std_logic_vector(unsigned(k_0_reg_115) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln315_fu_156_p2)
    begin
        if ((((icmp_ln315_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln315_fu_156_p2)
    begin
        if (((icmp_ln315_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    code_value_2_fu_224_p2 <= std_logic_vector(unsigned(code_value_1_reg_128) + unsigned(ap_const_lv16_1));
    code_value_fu_207_p2 <= std_logic_vector(shift_left(unsigned(code_value_1_reg_128),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    huffman_table_length_address0 <= zext_ln319_1_fu_219_p1(4 - 1 downto 0);

    huffman_table_length_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            huffman_table_length_ce0 <= ap_const_logic_1;
        else 
            huffman_table_length_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    huffman_table_length_d0 <= k_0_reg_115;

    huffman_table_length_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            huffman_table_length_we0 <= ap_const_logic_1;
        else 
            huffman_table_length_we0 <= ap_const_logic_0;
        end if; 
    end process;

    huffman_table_value_address0 <= zext_ln319_1_fu_219_p1(4 - 1 downto 0);

    huffman_table_value_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            huffman_table_value_ce0 <= ap_const_logic_1;
        else 
            huffman_table_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    huffman_table_value_d0 <= code_value_1_reg_128;

    huffman_table_value_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            huffman_table_value_we0 <= ap_const_logic_1;
        else 
            huffman_table_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln315_fu_156_p2 <= "1" when (k_0_reg_115 = ap_const_lv5_11) else "0";
    icmp_ln317_fu_176_p2 <= "1" when (signed(j_0_reg_140) > signed(zext_ln317_fu_173_p1)) else "0";
    j_fu_196_p2 <= std_logic_vector(unsigned(j_0_reg_140) + unsigned(ap_const_lv32_1));
    k_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(k_0_reg_115));
    nr_codes_address0 <= nr_codes_addr_reg_240;

    nr_codes_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nr_codes_ce0 <= ap_const_logic_1;
        else 
            nr_codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pos_in_table_fu_190_p2 <= std_logic_vector(unsigned(pos_in_table_1_fu_48) + unsigned(ap_const_lv8_1));
    std_table_address0 <= zext_ln319_fu_185_p1(4 - 1 downto 0);

    std_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            std_table_ce0 <= ap_const_logic_1;
        else 
            std_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln317_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln317_fu_162_p2),64));
    zext_ln317_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nr_codes_load_reg_245),32));
    zext_ln319_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_table_load_reg_273),64));
    zext_ln319_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_in_table_1_fu_48),64));
end behav;
