-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_write_bitstring_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    JpegEncoder_outhebyte_data_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    bs_length_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bs_length_ce0 : OUT STD_LOGIC;
    bs_length_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bs_value_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bs_value_ce0 : OUT STD_LOGIC;
    bs_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    counts : IN STD_LOGIC_VECTOR (31 downto 0);
    newByte_read : IN STD_LOGIC_VECTOR (31 downto 0);
    newBytePos_read : IN STD_LOGIC_VECTOR (31 downto 0);
    jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    jpeg_out_TVALID : OUT STD_LOGIC;
    jpeg_out_TREADY : IN STD_LOGIC;
    jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of p_write_bitstring_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mask1_ce0 : STD_LOGIC;
    signal mask1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln602_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_244_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_420 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln583_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln588_fu_277_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln588_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bs_length_load_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal posval_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal posval_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mask1_load_reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln592_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln592_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_1_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln602_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_193_ap_start : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_ap_done : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_ap_idle : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_ap_ready : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_value_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_193_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_193_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_byte_s_fu_193_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_193_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_193_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_193_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_193_ap_ce : STD_LOGIC;
    signal ap_predicate_op89_call_state11 : BOOLEAN;
    signal i_0_reg_173 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln590_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal posval_0_in_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal trunc_ln601_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln588_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln592_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln594_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal JpegEncoder_outhebyt_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal newBytePos_0_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln597_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newByte_0_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln583_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln594_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln592_fu_302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln594_fu_312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_322_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln594_fu_316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln592_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln597_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component p_write_byte_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        JpegEncoder_outhebyte_last_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        value_r : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component p_write_bitstringEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mask1_U : component p_write_bitstringEe0
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask1_address0,
        ce0 => mask1_ce0,
        q0 => mask1_q0);

    grp_p_write_byte_s_fu_193 : component p_write_byte_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_write_byte_s_fu_193_ap_start,
        ap_done => grp_p_write_byte_s_fu_193_ap_done,
        ap_idle => grp_p_write_byte_s_fu_193_ap_idle,
        ap_ready => grp_p_write_byte_s_fu_193_ap_ready,
        JpegEncoder_outhebyte_last_V_read => ap_const_lv1_0,
        value_r => grp_p_write_byte_s_fu_193_value_r,
        jpeg_out_TDATA => grp_p_write_byte_s_fu_193_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_byte_s_fu_193_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_byte_s_fu_193_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_byte_s_fu_193_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_byte_s_fu_193_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_byte_s_fu_193_jpeg_out_TLAST,
        ap_return => grp_p_write_byte_s_fu_193_ap_return,
        jpeg_out_TDATA_blk_n => grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n,
        ap_ce => grp_p_write_byte_s_fu_193_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    JpegEncoder_outhebyt_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1))) and (icmp_ln602_reg_485 = ap_const_lv1_1) and (tmp_1_reg_481 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln602_fu_374_p2 = ap_const_lv1_0)))) then 
                JpegEncoder_outhebyt_fu_90 <= grp_p_write_byte_s_fu_193_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                JpegEncoder_outhebyt_fu_90 <= JpegEncoder_outhebyte_data_V_read;
            end if; 
        end if;
    end process;

    i_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln590_fu_287_p2 = ap_const_lv1_0))) then 
                i_0_reg_173 <= i_reg_420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_173 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    newBytePos_0_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                newBytePos_0_fu_94 <= ap_const_lv32_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_1_fu_353_p3 = ap_const_lv1_0))) then 
                newBytePos_0_fu_94 <= add_ln597_fu_348_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                newBytePos_0_fu_94 <= newBytePos_read;
            end if; 
        end if;
    end process;

    newByte_0_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                newByte_0_fu_98 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                newByte_0_fu_98 <= select_ln592_reg_474;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                newByte_0_fu_98 <= newByte_read;
            end if; 
        end if;
    end process;

    posval_0_in_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                posval_0_in_reg_184 <= posval_reg_445;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                posval_0_in_reg_184 <= bs_length_load_reg_440;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bs_length_load_reg_440 <= bs_length_q0;
                trunc_ln588_reg_435 <= trunc_ln588_fu_277_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_420 <= i_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln602_reg_485 <= icmp_ln602_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mask1_load_reg_464 <= mask1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                posval_reg_445 <= posval_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                select_ln592_reg_474 <= select_ln592_fu_340_p3;
                tmp_1_reg_481 <= add_ln597_fu_348_p2(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state2, icmp_ln583_fu_239_p2, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_1_fu_353_p3, ap_predicate_op89_call_state11, icmp_ln590_fu_287_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln583_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln590_fu_287_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_1_fu_353_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state10 => 
                if (((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln597_fu_348_p1 <= newBytePos_0_fu_94;
    add_ln597_fu_348_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(add_ln597_fu_348_p1));
    and_ln592_fu_302_p2 <= (trunc_ln588_reg_435 and mask1_load_reg_464);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n, ap_predicate_op89_call_state11)
    begin
                ap_block_state11 <= ((grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n = ap_const_logic_0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln583_fu_239_p2)
    begin
        if ((((icmp_ln583_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op89_call_state11_assign_proc : process(tmp_1_reg_481, icmp_ln602_reg_485)
    begin
                ap_predicate_op89_call_state11 <= ((icmp_ln602_reg_485 = ap_const_lv1_1) and (tmp_1_reg_481 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln583_fu_239_p2)
    begin
        if (((icmp_ln583_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= newByte_0_fu_98;
    ap_return_1 <= newBytePos_0_fu_94;
    ap_return_2 <= JpegEncoder_outhebyt_fu_90;
    bs_length_address0 <= zext_ln588_fu_250_p1(7 - 1 downto 0);

    bs_length_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bs_length_ce0 <= ap_const_logic_1;
        else 
            bs_length_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bs_value_address0 <= zext_ln588_fu_250_p1(7 - 1 downto 0);

    bs_value_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bs_value_ce0 <= ap_const_logic_1;
        else 
            bs_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_p_write_byte_s_fu_193_ap_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_p_write_byte_s_fu_193_ap_ce <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_193_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_p_write_byte_s_fu_193_ap_start_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op89_call_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op89_call_state11 = ap_const_boolean_1)))) then 
            grp_p_write_byte_s_fu_193_ap_start <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_193_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_write_byte_s_fu_193_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state11) or (jpeg_out_TREADY and ap_CS_fsm_state10));

    grp_p_write_byte_s_fu_193_value_r_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op89_call_state11, trunc_ln601_fu_370_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op89_call_state11 = ap_const_boolean_1))) then 
            grp_p_write_byte_s_fu_193_value_r <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_p_write_byte_s_fu_193_value_r <= trunc_ln601_fu_370_p1;
        else 
            grp_p_write_byte_s_fu_193_value_r <= "XXXXXXXX";
        end if; 
    end process;

    i_fu_244_p2 <= std_logic_vector(unsigned(i_0_reg_173) + unsigned(ap_const_lv31_1));
    icmp_ln583_fu_239_p2 <= "1" when (signed(zext_ln583_fu_235_p1) < signed(counts)) else "0";
    icmp_ln590_fu_287_p2 <= "1" when (signed(posval_0_in_reg_184) > signed(ap_const_lv32_0)) else "0";
    icmp_ln592_fu_306_p2 <= "1" when (and_ln592_fu_302_p2 = ap_const_lv16_0) else "0";
    icmp_ln602_fu_374_p2 <= "1" when (select_ln592_reg_474 = ap_const_lv32_FF) else "0";
    jpeg_out_TDATA <= grp_p_write_byte_s_fu_193_jpeg_out_TDATA;

    jpeg_out_TDATA_blk_n_assign_proc : process(grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_1_reg_481, icmp_ln602_reg_485)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln602_reg_485 = ap_const_lv1_1) and (tmp_1_reg_481 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            jpeg_out_TDATA_blk_n <= grp_p_write_byte_s_fu_193_jpeg_out_TDATA_blk_n;
        else 
            jpeg_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    jpeg_out_TKEEP <= grp_p_write_byte_s_fu_193_jpeg_out_TKEEP;
    jpeg_out_TLAST <= grp_p_write_byte_s_fu_193_jpeg_out_TLAST;
    jpeg_out_TSTRB <= grp_p_write_byte_s_fu_193_jpeg_out_TSTRB;

    jpeg_out_TVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, grp_p_write_byte_s_fu_193_jpeg_out_TVALID, ap_predicate_op89_call_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op89_call_state11 = ap_const_boolean_1)))) then 
            jpeg_out_TVALID <= grp_p_write_byte_s_fu_193_jpeg_out_TVALID;
        else 
            jpeg_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    mask1_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln592_fu_293_p1, sext_ln594_fu_297_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mask1_address0 <= sext_ln594_fu_297_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mask1_address0 <= zext_ln592_fu_293_p1(4 - 1 downto 0);
        else 
            mask1_address0 <= "XXXX";
        end if; 
    end process;


    mask1_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            mask1_ce0 <= ap_const_logic_1;
        else 
            mask1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln594_fu_316_p2 <= (trunc_ln594_fu_312_p1 or mask1_q0);
    or_ln_fu_332_p3 <= (tmp_3_fu_322_p4 & or_ln594_fu_316_p2);
    posval_fu_281_p2 <= std_logic_vector(unsigned(posval_0_in_reg_184) + unsigned(ap_const_lv32_FFFFFFFF));
    select_ln592_fu_340_p3 <= 
        newByte_0_fu_98 when (icmp_ln592_fu_306_p2(0) = '1') else 
        or_ln_fu_332_p3;
    sext_ln594_fu_297_p0 <= newBytePos_0_fu_94;
        sext_ln594_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln594_fu_297_p0),64));

    tmp_1_fu_353_p3 <= add_ln597_fu_348_p2(31 downto 31);
    tmp_3_fu_322_p4 <= newByte_0_fu_98(31 downto 16);
    trunc_ln588_fu_277_p1 <= bs_value_q0(16 - 1 downto 0);
    trunc_ln594_fu_312_p1 <= newByte_0_fu_98(16 - 1 downto 0);
    trunc_ln601_fu_370_p1 <= select_ln592_reg_474(8 - 1 downto 0);
    zext_ln583_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_173),32));
    zext_ln588_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_173),64));
    zext_ln592_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posval_reg_445),64));
end behav;
