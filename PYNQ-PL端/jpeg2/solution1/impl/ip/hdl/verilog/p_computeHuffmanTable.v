// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_computeHuffmanTable (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nr_codes_address0,
        nr_codes_ce0,
        nr_codes_q0,
        std_table_address0,
        std_table_ce0,
        std_table_q0,
        huffman_table_length_address0,
        huffman_table_length_ce0,
        huffman_table_length_we0,
        huffman_table_length_d0,
        huffman_table_value_address0,
        huffman_table_value_ce0,
        huffman_table_value_we0,
        huffman_table_value_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] nr_codes_address0;
output   nr_codes_ce0;
input  [7:0] nr_codes_q0;
output  [7:0] std_table_address0;
output   std_table_ce0;
input  [7:0] std_table_q0;
output  [7:0] huffman_table_length_address0;
output   huffman_table_length_ce0;
output   huffman_table_length_we0;
output  [4:0] huffman_table_length_d0;
output  [7:0] huffman_table_value_address0;
output   huffman_table_value_ce0;
output   huffman_table_value_we0;
output  [15:0] huffman_table_value_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nr_codes_ce0;
reg std_table_ce0;
reg huffman_table_length_ce0;
reg huffman_table_length_we0;
reg huffman_table_value_ce0;
reg huffman_table_value_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] nr_codes_addr_reg_240;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln315_fu_156_p2;
reg   [7:0] nr_codes_load_reg_245;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln317_fu_176_p2;
wire   [31:0] j_fu_196_p2;
reg   [31:0] j_reg_258;
wire   [15:0] code_value_fu_207_p2;
wire   [4:0] k_fu_213_p2;
reg   [7:0] std_table_load_reg_273;
wire    ap_CS_fsm_state6;
wire   [15:0] code_value_3_fu_224_p2;
wire    ap_CS_fsm_state7;
reg   [15:0] code_value_0_reg_103;
reg   [4:0] k_0_reg_115;
reg   [15:0] code_value_1_reg_128;
reg   [31:0] j_0_reg_140;
wire   [63:0] zext_ln317_2_fu_168_p1;
wire   [63:0] zext_ln319_1_fu_185_p1;
wire   [63:0] zext_ln319_fu_219_p1;
reg   [7:0] pos_in_table_2_fu_48;
wire   [7:0] pos_in_table_fu_190_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] add_ln317_fu_162_p2;
wire   [31:0] zext_ln317_fu_173_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                code_value_0_reg_103[15 : 1] <= code_value_fu_207_p2[15 : 1];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                code_value_0_reg_103[1] <= 1'b0;
        code_value_0_reg_103[2] <= 1'b0;
        code_value_0_reg_103[3] <= 1'b0;
        code_value_0_reg_103[4] <= 1'b0;
        code_value_0_reg_103[5] <= 1'b0;
        code_value_0_reg_103[6] <= 1'b0;
        code_value_0_reg_103[7] <= 1'b0;
        code_value_0_reg_103[8] <= 1'b0;
        code_value_0_reg_103[9] <= 1'b0;
        code_value_0_reg_103[10] <= 1'b0;
        code_value_0_reg_103[11] <= 1'b0;
        code_value_0_reg_103[12] <= 1'b0;
        code_value_0_reg_103[13] <= 1'b0;
        code_value_0_reg_103[14] <= 1'b0;
        code_value_0_reg_103[15] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        code_value_1_reg_128 <= code_value_3_fu_224_p2;
    end else if (((icmp_ln315_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        code_value_1_reg_128 <= code_value_0_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_140 <= j_reg_258;
    end else if (((icmp_ln315_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_140 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_115 <= k_fu_213_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_115 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        pos_in_table_2_fu_48 <= pos_in_table_fu_190_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pos_in_table_2_fu_48 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_258 <= j_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln315_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        nr_codes_addr_reg_240 <= zext_ln317_2_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        nr_codes_load_reg_245 <= nr_codes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        std_table_load_reg_273 <= std_table_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln315_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln315_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        huffman_table_length_ce0 = 1'b1;
    end else begin
        huffman_table_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        huffman_table_length_we0 = 1'b1;
    end else begin
        huffman_table_length_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        huffman_table_value_ce0 = 1'b1;
    end else begin
        huffman_table_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        huffman_table_value_we0 = 1'b1;
    end else begin
        huffman_table_value_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nr_codes_ce0 = 1'b1;
    end else begin
        nr_codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        std_table_ce0 = 1'b1;
    end else begin
        std_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln315_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln317_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_162_p2 = ($signed(k_0_reg_115) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign code_value_3_fu_224_p2 = (code_value_1_reg_128 + 16'd1);

assign code_value_fu_207_p2 = code_value_1_reg_128 << 16'd1;

assign huffman_table_length_address0 = zext_ln319_fu_219_p1;

assign huffman_table_length_d0 = k_0_reg_115;

assign huffman_table_value_address0 = zext_ln319_fu_219_p1;

assign huffman_table_value_d0 = code_value_1_reg_128;

assign icmp_ln315_fu_156_p2 = ((k_0_reg_115 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_176_p2 = (($signed(j_0_reg_140) > $signed(zext_ln317_fu_173_p1)) ? 1'b1 : 1'b0);

assign j_fu_196_p2 = (j_0_reg_140 + 32'd1);

assign k_fu_213_p2 = (5'd1 + k_0_reg_115);

assign nr_codes_address0 = nr_codes_addr_reg_240;

assign pos_in_table_fu_190_p2 = (pos_in_table_2_fu_48 + 8'd1);

assign std_table_address0 = zext_ln319_1_fu_185_p1;

assign zext_ln317_2_fu_168_p1 = add_ln317_fu_162_p2;

assign zext_ln317_fu_173_p1 = nr_codes_load_reg_245;

assign zext_ln319_1_fu_185_p1 = pos_in_table_2_fu_48;

assign zext_ln319_fu_219_p1 = std_table_load_reg_273;

always @ (posedge ap_clk) begin
    code_value_0_reg_103[0] <= 1'b0;
end

endmodule //p_computeHuffmanTable
