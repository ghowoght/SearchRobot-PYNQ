// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_doHuffmanEncoding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        DU_address0,
        DU_ce0,
        DU_q0,
        prevDC_read,
        HTDC_length_address0,
        HTDC_length_ce0,
        HTDC_length_q0,
        HTDC_value_address0,
        HTDC_value_ce0,
        HTDC_value_q0,
        HTAC_length_address0,
        HTAC_length_ce0,
        HTAC_length_q0,
        HTAC_length_address1,
        HTAC_length_ce1,
        HTAC_length_q1,
        HTAC_value_address0,
        HTAC_value_ce0,
        HTAC_value_q0,
        HTAC_value_address1,
        HTAC_value_ce1,
        HTAC_value_q1,
        outputBitString_length_address0,
        outputBitString_length_ce0,
        outputBitString_length_we0,
        outputBitString_length_d0,
        outputBitString_value_address0,
        outputBitString_value_ce0,
        outputBitString_value_we0,
        outputBitString_value_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 149'd1;
parameter    ap_ST_fsm_state2 = 149'd2;
parameter    ap_ST_fsm_state3 = 149'd4;
parameter    ap_ST_fsm_state4 = 149'd8;
parameter    ap_ST_fsm_state5 = 149'd16;
parameter    ap_ST_fsm_state6 = 149'd32;
parameter    ap_ST_fsm_state7 = 149'd64;
parameter    ap_ST_fsm_state8 = 149'd128;
parameter    ap_ST_fsm_state9 = 149'd256;
parameter    ap_ST_fsm_state10 = 149'd512;
parameter    ap_ST_fsm_state11 = 149'd1024;
parameter    ap_ST_fsm_state12 = 149'd2048;
parameter    ap_ST_fsm_state13 = 149'd4096;
parameter    ap_ST_fsm_state14 = 149'd8192;
parameter    ap_ST_fsm_state15 = 149'd16384;
parameter    ap_ST_fsm_state16 = 149'd32768;
parameter    ap_ST_fsm_state17 = 149'd65536;
parameter    ap_ST_fsm_state18 = 149'd131072;
parameter    ap_ST_fsm_state19 = 149'd262144;
parameter    ap_ST_fsm_state20 = 149'd524288;
parameter    ap_ST_fsm_state21 = 149'd1048576;
parameter    ap_ST_fsm_state22 = 149'd2097152;
parameter    ap_ST_fsm_state23 = 149'd4194304;
parameter    ap_ST_fsm_state24 = 149'd8388608;
parameter    ap_ST_fsm_state25 = 149'd16777216;
parameter    ap_ST_fsm_state26 = 149'd33554432;
parameter    ap_ST_fsm_state27 = 149'd67108864;
parameter    ap_ST_fsm_state28 = 149'd134217728;
parameter    ap_ST_fsm_state29 = 149'd268435456;
parameter    ap_ST_fsm_state30 = 149'd536870912;
parameter    ap_ST_fsm_state31 = 149'd1073741824;
parameter    ap_ST_fsm_state32 = 149'd2147483648;
parameter    ap_ST_fsm_state33 = 149'd4294967296;
parameter    ap_ST_fsm_state34 = 149'd8589934592;
parameter    ap_ST_fsm_state35 = 149'd17179869184;
parameter    ap_ST_fsm_state36 = 149'd34359738368;
parameter    ap_ST_fsm_state37 = 149'd68719476736;
parameter    ap_ST_fsm_state38 = 149'd137438953472;
parameter    ap_ST_fsm_state39 = 149'd274877906944;
parameter    ap_ST_fsm_state40 = 149'd549755813888;
parameter    ap_ST_fsm_state41 = 149'd1099511627776;
parameter    ap_ST_fsm_state42 = 149'd2199023255552;
parameter    ap_ST_fsm_state43 = 149'd4398046511104;
parameter    ap_ST_fsm_state44 = 149'd8796093022208;
parameter    ap_ST_fsm_state45 = 149'd17592186044416;
parameter    ap_ST_fsm_state46 = 149'd35184372088832;
parameter    ap_ST_fsm_state47 = 149'd70368744177664;
parameter    ap_ST_fsm_state48 = 149'd140737488355328;
parameter    ap_ST_fsm_state49 = 149'd281474976710656;
parameter    ap_ST_fsm_state50 = 149'd562949953421312;
parameter    ap_ST_fsm_state51 = 149'd1125899906842624;
parameter    ap_ST_fsm_state52 = 149'd2251799813685248;
parameter    ap_ST_fsm_state53 = 149'd4503599627370496;
parameter    ap_ST_fsm_state54 = 149'd9007199254740992;
parameter    ap_ST_fsm_state55 = 149'd18014398509481984;
parameter    ap_ST_fsm_state56 = 149'd36028797018963968;
parameter    ap_ST_fsm_state57 = 149'd72057594037927936;
parameter    ap_ST_fsm_state58 = 149'd144115188075855872;
parameter    ap_ST_fsm_state59 = 149'd288230376151711744;
parameter    ap_ST_fsm_state60 = 149'd576460752303423488;
parameter    ap_ST_fsm_state61 = 149'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 149'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 149'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 149'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 149'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 149'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 149'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 149'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 149'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 149'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 149'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 149'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 149'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 149'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 149'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 149'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 149'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 149'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 149'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 149'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 149'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 149'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 149'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 149'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 149'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 149'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 149'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 149'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 149'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 149'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 149'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 149'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 149'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 149'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 149'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 149'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 149'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 149'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 149'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 149'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 149'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 149'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 149'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 149'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 149'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 149'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 149'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 149'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 149'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 149'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 149'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 149'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 149'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 149'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 149'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 149'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 149'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 149'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 149'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 149'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 149'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 149'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 149'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 149'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 149'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 149'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 149'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 149'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 149'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 149'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 149'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 149'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 149'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 149'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 149'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 149'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 149'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 149'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 149'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 149'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 149'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 149'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 149'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 149'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 149'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 149'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 149'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 149'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 149'd356811923176489970264571492362373784095686656;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] DU_address0;
output   DU_ce0;
input  [10:0] DU_q0;
input  [15:0] prevDC_read;
output  [3:0] HTDC_length_address0;
output   HTDC_length_ce0;
input  [4:0] HTDC_length_q0;
output  [3:0] HTDC_value_address0;
output   HTDC_value_ce0;
input  [15:0] HTDC_value_q0;
output  [7:0] HTAC_length_address0;
output   HTAC_length_ce0;
input  [4:0] HTAC_length_q0;
output  [7:0] HTAC_length_address1;
output   HTAC_length_ce1;
input  [4:0] HTAC_length_q1;
output  [7:0] HTAC_value_address0;
output   HTAC_value_ce0;
input  [15:0] HTAC_value_q0;
output  [7:0] HTAC_value_address1;
output   HTAC_value_ce1;
input  [15:0] HTAC_value_q1;
output  [6:0] outputBitString_length_address0;
output   outputBitString_length_ce0;
output   outputBitString_length_we0;
output  [31:0] outputBitString_length_d0;
output  [6:0] outputBitString_value_address0;
output   outputBitString_value_ce0;
output   outputBitString_value_we0;
output  [31:0] outputBitString_value_d0;
output  [15:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] DU_address0;
reg DU_ce0;
reg[3:0] HTDC_length_address0;
reg HTDC_length_ce0;
reg[3:0] HTDC_value_address0;
reg HTDC_value_ce0;
reg[7:0] HTAC_length_address0;
reg HTAC_length_ce0;
reg HTAC_length_ce1;
reg[7:0] HTAC_value_address0;
reg HTAC_value_ce0;
reg HTAC_value_ce1;
reg[6:0] outputBitString_length_address0;
reg outputBitString_length_ce0;
reg outputBitString_length_we0;
reg[31:0] outputBitString_length_d0;
reg[6:0] outputBitString_value_address0;
reg outputBitString_value_ce0;
reg outputBitString_value_we0;
reg[31:0] outputBitString_value_d0;
reg[15:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [148:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [10:0] reg_1557;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state141;
reg   [4:0] reg_1561;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
reg   [15:0] reg_1565;
wire    ap_CS_fsm_state3;
wire   [31:0] EOB_length_fu_1569_p1;
reg   [31:0] EOB_length_reg_2041;
wire   [31:0] EOB_value_fu_1573_p1;
reg   [31:0] EOB_value_reg_2046;
wire   [31:0] SIXTEEN_ZEROS_length_fu_1577_p1;
reg   [31:0] SIXTEEN_ZEROS_length_reg_2051;
wire   [31:0] SIXTEEN_ZEROS_value_fu_1581_p1;
reg   [31:0] SIXTEEN_ZEROS_value_reg_2056;
wire  signed [15:0] sext_ln383_fu_1585_p1;
reg  signed [15:0] sext_ln383_reg_2061;
wire  signed [16:0] dcDiff_fu_1597_p2;
reg  signed [16:0] dcDiff_reg_2066;
wire   [15:0] trunc_ln383_fu_1603_p1;
reg   [15:0] trunc_ln383_reg_2071;
wire  signed [31:0] sext_ln383_3_fu_1607_p1;
reg  signed [31:0] sext_ln383_3_reg_2077;
wire   [0:0] icmp_ln385_fu_1611_p2;
reg   [0:0] icmp_ln385_reg_2083;
wire   [0:0] icmp_ln365_fu_1617_p2;
reg   [0:0] icmp_ln365_reg_2087;
wire    ap_CS_fsm_state4;
wire   [15:0] select_ln365_fu_1627_p3;
reg   [15:0] select_ln365_reg_2092;
wire   [29:0] zext_ln365_fu_1634_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] length_fu_1643_p2;
wire    ap_CS_fsm_state6;
wire  signed [29:0] sext_ln367_fu_1659_p1;
wire   [0:0] icmp_ln367_fu_1637_p2;
wire   [31:0] grp_fu_1663_p2;
reg   [31:0] shl_ln371_reg_2125;
wire   [31:0] add_ln371_1_fu_1680_p2;
reg   [31:0] add_ln371_1_reg_2130;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [0:0] grp_fu_1542_p2;
reg   [0:0] icmp_ln395_reg_2140;
wire    ap_CS_fsm_state12;
wire   [31:0] zext_ln395_fu_1711_p1;
reg   [31:0] zext_ln395_reg_2144;
wire    ap_CS_fsm_state13;
reg   [0:0] icmp_ln395_1_reg_2154;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln395_2_reg_2163;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [0:0] icmp_ln395_3_reg_2172;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg   [0:0] icmp_ln395_4_reg_2181;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [0:0] icmp_ln395_5_reg_2190;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg   [0:0] icmp_ln395_6_reg_2199;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg   [0:0] icmp_ln395_7_reg_2208;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg   [0:0] icmp_ln395_8_reg_2217;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg   [0:0] icmp_ln395_9_reg_2226;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [0:0] icmp_ln395_10_reg_2235;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [0:0] icmp_ln395_11_reg_2244;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [0:0] icmp_ln395_12_reg_2253;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg   [0:0] icmp_ln395_13_reg_2262;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
reg   [0:0] icmp_ln395_14_reg_2271;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg   [0:0] icmp_ln395_15_reg_2280;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg   [0:0] icmp_ln395_16_reg_2289;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg   [0:0] icmp_ln395_17_reg_2298;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
reg   [0:0] icmp_ln395_18_reg_2307;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [0:0] icmp_ln395_19_reg_2316;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
reg   [0:0] icmp_ln395_20_reg_2325;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
reg   [0:0] icmp_ln395_21_reg_2334;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
reg   [0:0] icmp_ln395_22_reg_2343;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
reg   [0:0] icmp_ln395_23_reg_2352;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg   [0:0] icmp_ln395_24_reg_2361;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
reg   [0:0] icmp_ln395_25_reg_2370;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
reg   [0:0] icmp_ln395_26_reg_2379;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
reg   [0:0] icmp_ln395_27_reg_2388;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
reg   [0:0] icmp_ln395_28_reg_2397;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
reg   [0:0] icmp_ln395_29_reg_2406;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
reg   [0:0] icmp_ln395_30_reg_2415;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
reg   [0:0] icmp_ln395_31_reg_2424;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
reg   [0:0] icmp_ln395_32_reg_2433;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
reg   [0:0] icmp_ln395_33_reg_2442;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
reg   [0:0] icmp_ln395_34_reg_2451;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
reg   [0:0] icmp_ln395_35_reg_2460;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
reg   [0:0] icmp_ln395_36_reg_2469;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
reg   [0:0] icmp_ln395_37_reg_2478;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
reg   [0:0] icmp_ln395_38_reg_2487;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
reg   [0:0] icmp_ln395_39_reg_2496;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
reg   [0:0] icmp_ln395_40_reg_2505;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
reg   [0:0] icmp_ln395_41_reg_2514;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
reg   [0:0] icmp_ln395_42_reg_2523;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
reg   [0:0] icmp_ln395_43_reg_2532;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
reg   [0:0] icmp_ln395_44_reg_2541;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
reg   [0:0] icmp_ln395_45_reg_2550;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
reg   [0:0] icmp_ln395_46_reg_2559;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
reg   [0:0] icmp_ln395_47_reg_2568;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
reg   [0:0] icmp_ln395_48_reg_2577;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
reg   [0:0] icmp_ln395_49_reg_2586;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
reg   [0:0] icmp_ln395_50_reg_2595;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
reg   [0:0] icmp_ln395_51_reg_2604;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
reg   [0:0] icmp_ln395_52_reg_2613;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state117;
reg   [0:0] icmp_ln395_53_reg_2622;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state119;
reg   [0:0] icmp_ln395_54_reg_2631;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
reg   [0:0] icmp_ln395_55_reg_2640;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
reg   [0:0] icmp_ln395_56_reg_2649;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state125;
reg   [0:0] icmp_ln395_57_reg_2658;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state127;
reg   [0:0] icmp_ln395_58_reg_2667;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state129;
reg   [0:0] icmp_ln395_59_reg_2676;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state131;
reg   [0:0] icmp_ln395_60_reg_2685;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state133;
reg   [0:0] icmp_ln395_61_reg_2694;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state135;
wire   [0:0] not_icmp_ln395_62_fu_1715_p2;
reg   [0:0] not_icmp_ln395_62_reg_2703;
wire    ap_CS_fsm_state136;
wire   [5:0] p_cast_fu_1721_p1;
wire    ap_CS_fsm_state137;
wire   [31:0] zext_ln399_fu_1724_p1;
reg   [31:0] zext_ln399_reg_2713;
wire    ap_CS_fsm_state138;
wire   [31:0] index_fu_1739_p2;
wire    ap_CS_fsm_state139;
wire   [0:0] icmp_ln399_fu_1728_p2;
wire   [0:0] icmp_ln420_fu_1733_p2;
wire    ap_CS_fsm_state140;
wire   [0:0] icmp_ln402_1_fu_1756_p2;
reg   [0:0] icmp_ln402_1_reg_2735;
wire   [31:0] i_fu_1772_p2;
wire    ap_CS_fsm_state142;
wire   [0:0] or_ln402_fu_1767_p2;
wire   [31:0] zeroCounts_fu_1778_p2;
reg   [31:0] zeroCounts_reg_2748;
wire   [3:0] zeroCounts_1_fu_1785_p1;
reg   [3:0] zeroCounts_1_reg_2754;
wire   [27:0] grp_fu_1548_p4;
reg   [27:0] tmp_137_reg_2759;
wire   [0:0] icmp_ln407_fu_1789_p2;
reg   [0:0] icmp_ln407_reg_2764;
wire    ap_CS_fsm_state143;
wire   [31:0] index_4_fu_1798_p2;
reg   [31:0] index_4_reg_2768;
wire   [28:0] add_ln409_fu_1812_p2;
reg   [28:0] add_ln409_reg_2773;
wire   [31:0] add_ln411_fu_1827_p2;
wire    ap_CS_fsm_state144;
wire   [0:0] icmp_ln409_fu_1822_p2;
wire  signed [31:0] sext_ln415_fu_1843_p1;
reg  signed [31:0] sext_ln415_reg_2786;
wire  signed [11:0] sext_ln415_cast21_ca_fu_1847_p1;
reg  signed [11:0] sext_ln415_cast21_ca_reg_2791;
wire   [0:0] icmp_ln365_1_fu_1851_p2;
reg   [0:0] icmp_ln365_1_reg_2796;
wire   [29:0] zext_ln365_1_fu_1875_p1;
wire   [31:0] length_1_fu_1885_p2;
wire    ap_CS_fsm_state145;
wire  signed [29:0] sext_ln367_1_fu_1901_p1;
wire   [0:0] icmp_ln367_1_fu_1879_p2;
wire   [31:0] i_2_fu_1929_p2;
reg   [31:0] i_2_reg_2829;
wire   [31:0] grp_fu_1905_p2;
reg   [31:0] shl_ln371_1_reg_2834;
wire    ap_CS_fsm_state146;
wire   [11:0] add_ln371_2_fu_1935_p2;
reg   [11:0] add_ln371_2_reg_2839;
reg   [4:0] HTAC_length_load_2_reg_2844;
reg   [15:0] HTAC_value_load_2_reg_2849;
wire   [31:0] ret_value_1_fu_1948_p3;
reg   [31:0] ret_value_1_reg_2854;
wire    ap_CS_fsm_state147;
wire   [31:0] index_5_fu_1954_p2;
reg   [31:0] index_5_reg_2859;
wire   [31:0] index_6_fu_1974_p2;
reg   [31:0] index_6_reg_2864;
reg   [29:0] v_0_i_reg_1155;
reg  signed [31:0] ret_length_reg_1164;
reg   [1:0] index_0_reg_1177;
wire    ap_CS_fsm_state11;
reg   [5:0] endPos_0_lcssa_reg_1190;
reg  signed [31:0] index_1_reg_1446;
wire    ap_CS_fsm_state148;
reg   [31:0] startPos_reg_1456;
reg  signed [31:0] i_1_reg_1468;
reg  signed [31:0] index_2_reg_1479;
reg  signed [31:0] index_3_reg_1489;
wire   [31:0] zext_ln413_fu_1839_p1;
reg   [31:0] zeroCounts_0_reg_1500;
reg   [29:0] v_0_i4_reg_1510;
reg   [31:0] ret_length_1_reg_1519;
reg   [31:0] bitStringCounts_writ_reg_1532;
wire  signed [63:0] sext_ln390_fu_1669_p1;
wire  signed [63:0] sext_ln422_fu_1745_p1;
wire  signed [63:0] sext_ln402_fu_1751_p1;
wire  signed [63:0] sext_ln411_fu_1833_p1;
wire  signed [63:0] sext_ln416_1_fu_1923_p1;
wire  signed [63:0] sext_ln416_fu_1960_p1;
wire  signed [63:0] sext_ln417_fu_1980_p1;
wire   [31:0] zext_ln390_fu_1685_p1;
wire   [31:0] zext_ln386_fu_1701_p1;
wire   [31:0] zext_ln416_fu_1966_p1;
wire   [31:0] zext_ln390_1_fu_1690_p1;
wire   [31:0] ret_value_fu_1695_p3;
wire   [31:0] zext_ln386_1_fu_1706_p1;
wire   [31:0] zext_ln416_1_fu_1970_p1;
reg   [31:0] grp_fu_1548_p1;
wire  signed [15:0] sext_ln383_2_fu_1593_p0;
wire  signed [16:0] sext_ln383_1_fu_1589_p1;
wire  signed [16:0] sext_ln383_2_fu_1593_p1;
wire  signed [15:0] icmp_ln385_fu_1611_p1;
wire   [15:0] sub_ln365_fu_1622_p2;
wire   [28:0] tmp_136_fu_1649_p4;
wire   [31:0] add_ln371_fu_1675_p2;
wire   [0:0] icmp_ln402_fu_1761_p2;
wire   [31:0] zext_ln409_fu_1794_p1;
wire   [28:0] empty_139_fu_1804_p1;
wire   [28:0] empty_140_fu_1808_p1;
wire   [28:0] trunc_ln409_fu_1818_p1;
wire   [11:0] sub_ln365_1_fu_1857_p2;
wire   [11:0] v_fu_1863_p3;
wire  signed [15:0] sext_ln365_fu_1871_p1;
wire   [28:0] tmp_138_fu_1891_p4;
wire   [31:0] shl_ln416_fu_1911_p2;
wire   [31:0] or_ln416_fu_1917_p2;
wire  signed [31:0] sext_ln371_fu_1940_p1;
wire   [31:0] add_ln371_3_fu_1943_p2;
wire    ap_CS_fsm_state149;
reg   [15:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [148:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 149'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 32'd0;
end

jpeg2_shl_32ns_32CeG #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
jpeg2_shl_32ns_32CeG_U286(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1),
    .din1(ret_length_reg_1164),
    .ce(1'b1),
    .dout(grp_fu_1663_p2)
);

jpeg2_shl_32ns_32DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
jpeg2_shl_32ns_32DeQ_U287(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1),
    .din1(ret_length_1_reg_1519),
    .ce(1'b1),
    .dout(grp_fu_1905_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state149)) begin
            ap_return_0_preg <= sext_ln383_reg_2061;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state149)) begin
            ap_return_1_preg <= bitStringCounts_writ_reg_1532;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln399_fu_1728_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state139))) begin
        if ((icmp_ln420_fu_1733_p2 == 1'd1)) begin
            bitStringCounts_writ_reg_1532 <= index_1_reg_1446;
        end else if ((icmp_ln420_fu_1733_p2 == 1'd0)) begin
            bitStringCounts_writ_reg_1532 <= index_fu_1739_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        endPos_0_lcssa_reg_1190 <= p_cast_fu_1721_p1;
    end else if (((icmp_ln395_61_reg_2694 == 1'd0) & (1'b1 == ap_CS_fsm_state135))) begin
        endPos_0_lcssa_reg_1190 <= 6'd2;
    end else if (((icmp_ln395_60_reg_2685 == 1'd0) & (1'b1 == ap_CS_fsm_state133))) begin
        endPos_0_lcssa_reg_1190 <= 6'd3;
    end else if (((icmp_ln395_59_reg_2676 == 1'd0) & (1'b1 == ap_CS_fsm_state131))) begin
        endPos_0_lcssa_reg_1190 <= 6'd4;
    end else if (((icmp_ln395_58_reg_2667 == 1'd0) & (1'b1 == ap_CS_fsm_state129))) begin
        endPos_0_lcssa_reg_1190 <= 6'd5;
    end else if (((icmp_ln395_57_reg_2658 == 1'd0) & (1'b1 == ap_CS_fsm_state127))) begin
        endPos_0_lcssa_reg_1190 <= 6'd6;
    end else if (((icmp_ln395_56_reg_2649 == 1'd0) & (1'b1 == ap_CS_fsm_state125))) begin
        endPos_0_lcssa_reg_1190 <= 6'd7;
    end else if (((icmp_ln395_55_reg_2640 == 1'd0) & (1'b1 == ap_CS_fsm_state123))) begin
        endPos_0_lcssa_reg_1190 <= 6'd8;
    end else if (((icmp_ln395_54_reg_2631 == 1'd0) & (1'b1 == ap_CS_fsm_state121))) begin
        endPos_0_lcssa_reg_1190 <= 6'd9;
    end else if (((icmp_ln395_53_reg_2622 == 1'd0) & (1'b1 == ap_CS_fsm_state119))) begin
        endPos_0_lcssa_reg_1190 <= 6'd10;
    end else if (((icmp_ln395_52_reg_2613 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
        endPos_0_lcssa_reg_1190 <= 6'd11;
    end else if (((icmp_ln395_51_reg_2604 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        endPos_0_lcssa_reg_1190 <= 6'd12;
    end else if (((icmp_ln395_50_reg_2595 == 1'd0) & (1'b1 == ap_CS_fsm_state113))) begin
        endPos_0_lcssa_reg_1190 <= 6'd13;
    end else if (((icmp_ln395_49_reg_2586 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
        endPos_0_lcssa_reg_1190 <= 6'd14;
    end else if (((icmp_ln395_48_reg_2577 == 1'd0) & (1'b1 == ap_CS_fsm_state109))) begin
        endPos_0_lcssa_reg_1190 <= 6'd15;
    end else if (((icmp_ln395_47_reg_2568 == 1'd0) & (1'b1 == ap_CS_fsm_state107))) begin
        endPos_0_lcssa_reg_1190 <= 6'd16;
    end else if (((icmp_ln395_46_reg_2559 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
        endPos_0_lcssa_reg_1190 <= 6'd17;
    end else if (((icmp_ln395_45_reg_2550 == 1'd0) & (1'b1 == ap_CS_fsm_state103))) begin
        endPos_0_lcssa_reg_1190 <= 6'd18;
    end else if (((icmp_ln395_44_reg_2541 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
        endPos_0_lcssa_reg_1190 <= 6'd19;
    end else if (((icmp_ln395_43_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        endPos_0_lcssa_reg_1190 <= 6'd20;
    end else if (((icmp_ln395_42_reg_2523 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        endPos_0_lcssa_reg_1190 <= 6'd21;
    end else if (((icmp_ln395_41_reg_2514 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
        endPos_0_lcssa_reg_1190 <= 6'd22;
    end else if (((icmp_ln395_40_reg_2505 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
        endPos_0_lcssa_reg_1190 <= 6'd23;
    end else if (((icmp_ln395_39_reg_2496 == 1'd0) & (1'b1 == ap_CS_fsm_state91))) begin
        endPos_0_lcssa_reg_1190 <= 6'd24;
    end else if (((icmp_ln395_38_reg_2487 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
        endPos_0_lcssa_reg_1190 <= 6'd25;
    end else if (((icmp_ln395_37_reg_2478 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        endPos_0_lcssa_reg_1190 <= 6'd26;
    end else if (((icmp_ln395_36_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        endPos_0_lcssa_reg_1190 <= 6'd27;
    end else if (((icmp_ln395_35_reg_2460 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
        endPos_0_lcssa_reg_1190 <= 6'd28;
    end else if (((icmp_ln395_34_reg_2451 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        endPos_0_lcssa_reg_1190 <= 6'd29;
    end else if (((icmp_ln395_33_reg_2442 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        endPos_0_lcssa_reg_1190 <= 6'd30;
    end else if (((icmp_ln395_32_reg_2433 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        endPos_0_lcssa_reg_1190 <= 6'd31;
    end else if (((icmp_ln395_31_reg_2424 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        endPos_0_lcssa_reg_1190 <= 6'd32;
    end else if (((icmp_ln395_30_reg_2415 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        endPos_0_lcssa_reg_1190 <= 6'd33;
    end else if (((icmp_ln395_29_reg_2406 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        endPos_0_lcssa_reg_1190 <= 6'd34;
    end else if (((icmp_ln395_28_reg_2397 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        endPos_0_lcssa_reg_1190 <= 6'd35;
    end else if (((icmp_ln395_27_reg_2388 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        endPos_0_lcssa_reg_1190 <= 6'd36;
    end else if (((icmp_ln395_26_reg_2379 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        endPos_0_lcssa_reg_1190 <= 6'd37;
    end else if (((icmp_ln395_25_reg_2370 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        endPos_0_lcssa_reg_1190 <= 6'd38;
    end else if (((icmp_ln395_24_reg_2361 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        endPos_0_lcssa_reg_1190 <= 6'd39;
    end else if (((icmp_ln395_23_reg_2352 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        endPos_0_lcssa_reg_1190 <= 6'd40;
    end else if (((icmp_ln395_22_reg_2343 == 1'd0) & (1'b1 == ap_CS_fsm_state57))) begin
        endPos_0_lcssa_reg_1190 <= 6'd41;
    end else if (((icmp_ln395_21_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
        endPos_0_lcssa_reg_1190 <= 6'd42;
    end else if (((icmp_ln395_20_reg_2325 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        endPos_0_lcssa_reg_1190 <= 6'd43;
    end else if (((icmp_ln395_19_reg_2316 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        endPos_0_lcssa_reg_1190 <= 6'd44;
    end else if (((icmp_ln395_18_reg_2307 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        endPos_0_lcssa_reg_1190 <= 6'd45;
    end else if (((icmp_ln395_17_reg_2298 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        endPos_0_lcssa_reg_1190 <= 6'd46;
    end else if (((icmp_ln395_16_reg_2289 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        endPos_0_lcssa_reg_1190 <= 6'd47;
    end else if (((icmp_ln395_15_reg_2280 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        endPos_0_lcssa_reg_1190 <= 6'd48;
    end else if (((icmp_ln395_14_reg_2271 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        endPos_0_lcssa_reg_1190 <= 6'd49;
    end else if (((icmp_ln395_13_reg_2262 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        endPos_0_lcssa_reg_1190 <= 6'd50;
    end else if (((icmp_ln395_12_reg_2253 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        endPos_0_lcssa_reg_1190 <= 6'd51;
    end else if (((icmp_ln395_11_reg_2244 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        endPos_0_lcssa_reg_1190 <= 6'd52;
    end else if (((icmp_ln395_10_reg_2235 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        endPos_0_lcssa_reg_1190 <= 6'd53;
    end else if (((icmp_ln395_9_reg_2226 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        endPos_0_lcssa_reg_1190 <= 6'd54;
    end else if (((icmp_ln395_8_reg_2217 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        endPos_0_lcssa_reg_1190 <= 6'd55;
    end else if (((icmp_ln395_7_reg_2208 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        endPos_0_lcssa_reg_1190 <= 6'd56;
    end else if (((icmp_ln395_6_reg_2199 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        endPos_0_lcssa_reg_1190 <= 6'd57;
    end else if (((icmp_ln395_5_reg_2190 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        endPos_0_lcssa_reg_1190 <= 6'd58;
    end else if (((icmp_ln395_4_reg_2181 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        endPos_0_lcssa_reg_1190 <= 6'd59;
    end else if (((icmp_ln395_3_reg_2172 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        endPos_0_lcssa_reg_1190 <= 6'd60;
    end else if (((icmp_ln395_2_reg_2163 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        endPos_0_lcssa_reg_1190 <= 6'd61;
    end else if (((icmp_ln395_1_reg_2154 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        endPos_0_lcssa_reg_1190 <= 6'd62;
    end else if (((icmp_ln395_reg_2140 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        endPos_0_lcssa_reg_1190 <= 6'd63;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln402_fu_1767_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state142))) begin
        i_1_reg_1468 <= i_fu_1772_p2;
    end else if (((icmp_ln399_fu_1728_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state139))) begin
        i_1_reg_1468 <= startPos_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln385_reg_2083 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        index_0_reg_1177 <= 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        index_0_reg_1177 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        index_1_reg_1446 <= index_6_reg_2864;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        index_1_reg_1446 <= zext_ln395_reg_2144;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln407_fu_1789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state143))) begin
        index_2_reg_1479 <= index_1_reg_1446;
    end else if (((icmp_ln407_reg_2764 == 1'd1) & (icmp_ln409_fu_1822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        index_2_reg_1479 <= add_ln411_fu_1827_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln407_fu_1789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state143))) begin
        index_3_reg_1489 <= index_1_reg_1446;
    end else if (((icmp_ln409_fu_1822_p2 == 1'd1) & (icmp_ln407_reg_2764 == 1'd1) & (1'b1 == ap_CS_fsm_state144))) begin
        index_3_reg_1489 <= index_4_reg_2768;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln367_1_fu_1879_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145))) begin
        ret_length_1_reg_1519 <= length_1_fu_1885_p2;
    end else if (((1'b1 == ap_CS_fsm_state144) & ((icmp_ln409_fu_1822_p2 == 1'd1) | (icmp_ln407_reg_2764 == 1'd0)))) begin
        ret_length_1_reg_1519 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln367_fu_1637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ret_length_reg_1164 <= length_fu_1643_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_length_reg_1164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        startPos_reg_1456 <= i_2_reg_2829;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        startPos_reg_1456 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln367_1_fu_1879_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145))) begin
        v_0_i4_reg_1510 <= sext_ln367_1_fu_1901_p1;
    end else if (((1'b1 == ap_CS_fsm_state144) & ((icmp_ln409_fu_1822_p2 == 1'd1) | (icmp_ln407_reg_2764 == 1'd0)))) begin
        v_0_i4_reg_1510 <= zext_ln365_1_fu_1875_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln367_fu_1637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        v_0_i_reg_1155 <= sext_ln367_fu_1659_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v_0_i_reg_1155 <= zext_ln365_fu_1634_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln407_fu_1789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state143))) begin
        zeroCounts_0_reg_1500 <= zeroCounts_reg_2748;
    end else if (((icmp_ln409_fu_1822_p2 == 1'd1) & (icmp_ln407_reg_2764 == 1'd1) & (1'b1 == ap_CS_fsm_state144))) begin
        zeroCounts_0_reg_1500 <= zext_ln413_fu_1839_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        EOB_length_reg_2041[4 : 0] <= EOB_length_fu_1569_p1[4 : 0];
        EOB_value_reg_2046[15 : 0] <= EOB_value_fu_1573_p1[15 : 0];
        SIXTEEN_ZEROS_length_reg_2051[4 : 0] <= SIXTEEN_ZEROS_length_fu_1577_p1[4 : 0];
        SIXTEEN_ZEROS_value_reg_2056[15 : 0] <= SIXTEEN_ZEROS_value_fu_1581_p1[15 : 0];
        dcDiff_reg_2066 <= dcDiff_fu_1597_p2;
        icmp_ln385_reg_2083 <= icmp_ln385_fu_1611_p2;
        sext_ln383_3_reg_2077 <= sext_ln383_3_fu_1607_p1;
        sext_ln383_reg_2061 <= sext_ln383_fu_1585_p1;
        trunc_ln383_reg_2071 <= trunc_ln383_fu_1603_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        HTAC_length_load_2_reg_2844 <= HTAC_length_q0;
        HTAC_value_load_2_reg_2849 <= HTAC_value_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln365_reg_2087 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln371_1_reg_2130 <= add_ln371_1_fu_1680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln365_1_reg_2796 == 1'd0) & (1'b1 == ap_CS_fsm_state146))) begin
        add_ln371_2_reg_2839 <= add_ln371_2_fu_1935_p2;
        shl_ln371_1_reg_2834 <= grp_fu_1905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln407_fu_1789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state143))) begin
        add_ln409_reg_2773 <= add_ln409_fu_1812_p2;
        index_4_reg_2768 <= index_4_fu_1798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln367_1_fu_1879_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state145))) begin
        i_2_reg_2829 <= i_2_fu_1929_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & ((icmp_ln409_fu_1822_p2 == 1'd1) | (icmp_ln407_reg_2764 == 1'd0)))) begin
        icmp_ln365_1_reg_2796 <= icmp_ln365_1_fu_1851_p2;
        sext_ln415_cast21_ca_reg_2791 <= sext_ln415_cast21_ca_fu_1847_p1;
        sext_ln415_reg_2786 <= sext_ln415_fu_1843_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln365_reg_2087 <= icmp_ln365_fu_1617_p2;
        select_ln365_reg_2092 <= select_ln365_fu_1627_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        icmp_ln395_10_reg_2235 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        icmp_ln395_11_reg_2244 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        icmp_ln395_12_reg_2253 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        icmp_ln395_13_reg_2262 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        icmp_ln395_14_reg_2271 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        icmp_ln395_15_reg_2280 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        icmp_ln395_16_reg_2289 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        icmp_ln395_17_reg_2298 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        icmp_ln395_18_reg_2307 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        icmp_ln395_19_reg_2316 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln395_1_reg_2154 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        icmp_ln395_20_reg_2325 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        icmp_ln395_21_reg_2334 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        icmp_ln395_22_reg_2343 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        icmp_ln395_23_reg_2352 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        icmp_ln395_24_reg_2361 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        icmp_ln395_25_reg_2370 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        icmp_ln395_26_reg_2379 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        icmp_ln395_27_reg_2388 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        icmp_ln395_28_reg_2397 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        icmp_ln395_29_reg_2406 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        icmp_ln395_2_reg_2163 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        icmp_ln395_30_reg_2415 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        icmp_ln395_31_reg_2424 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        icmp_ln395_32_reg_2433 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        icmp_ln395_33_reg_2442 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        icmp_ln395_34_reg_2451 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        icmp_ln395_35_reg_2460 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        icmp_ln395_36_reg_2469 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        icmp_ln395_37_reg_2478 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        icmp_ln395_38_reg_2487 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        icmp_ln395_39_reg_2496 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        icmp_ln395_3_reg_2172 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        icmp_ln395_40_reg_2505 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        icmp_ln395_41_reg_2514 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        icmp_ln395_42_reg_2523 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        icmp_ln395_43_reg_2532 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        icmp_ln395_44_reg_2541 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        icmp_ln395_45_reg_2550 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        icmp_ln395_46_reg_2559 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        icmp_ln395_47_reg_2568 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        icmp_ln395_48_reg_2577 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        icmp_ln395_49_reg_2586 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln395_4_reg_2181 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        icmp_ln395_50_reg_2595 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        icmp_ln395_51_reg_2604 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        icmp_ln395_52_reg_2613 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        icmp_ln395_53_reg_2622 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        icmp_ln395_54_reg_2631 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        icmp_ln395_55_reg_2640 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        icmp_ln395_56_reg_2649 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        icmp_ln395_57_reg_2658 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        icmp_ln395_58_reg_2667 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        icmp_ln395_59_reg_2676 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        icmp_ln395_5_reg_2190 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        icmp_ln395_60_reg_2685 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        icmp_ln395_61_reg_2694 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        icmp_ln395_6_reg_2199 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        icmp_ln395_7_reg_2208 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln395_8_reg_2217 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        icmp_ln395_9_reg_2226 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln395_reg_2140 <= grp_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        icmp_ln402_1_reg_2735 <= icmp_ln402_1_fu_1756_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        icmp_ln407_reg_2764 <= icmp_ln407_fu_1789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        index_5_reg_2859 <= index_5_fu_1954_p2;
        index_6_reg_2864 <= index_6_fu_1974_p2;
        ret_value_1_reg_2854 <= ret_value_1_fu_1948_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        not_icmp_ln395_62_reg_2703 <= not_icmp_ln395_62_fu_1715_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_1557 <= DU_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_1561 <= HTDC_length_q0;
        reg_1565 <= HTDC_value_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln365_reg_2087 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln371_reg_2125 <= grp_fu_1663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln402_fu_1767_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state142))) begin
        tmp_137_reg_2759 <= {{grp_fu_1548_p1[31:4]}};
        zeroCounts_1_reg_2754 <= zeroCounts_1_fu_1785_p1;
        zeroCounts_reg_2748 <= zeroCounts_fu_1778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        zext_ln395_reg_2144[1 : 0] <= zext_ln395_fu_1711_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        zext_ln399_reg_2713[5 : 0] <= zext_ln399_fu_1724_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        DU_address0 = sext_ln402_fu_1751_p1;
    end else if ((1'b1 == ap_CS_fsm_state135)) begin
        DU_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state133)) begin
        DU_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        DU_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        DU_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        DU_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        DU_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        DU_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        DU_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        DU_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        DU_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        DU_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        DU_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        DU_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        DU_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        DU_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        DU_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        DU_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        DU_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        DU_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        DU_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        DU_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        DU_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        DU_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        DU_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        DU_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        DU_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        DU_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        DU_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        DU_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        DU_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        DU_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        DU_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        DU_address0 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        DU_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        DU_address0 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        DU_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        DU_address0 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        DU_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        DU_address0 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        DU_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        DU_address0 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        DU_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        DU_address0 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        DU_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        DU_address0 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        DU_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        DU_address0 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        DU_address0 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        DU_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        DU_address0 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        DU_address0 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        DU_address0 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        DU_address0 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DU_address0 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DU_address0 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        DU_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        DU_address0 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        DU_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        DU_address0 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        DU_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        DU_address0 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        DU_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DU_address0 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        DU_address0 = 64'd0;
    end else begin
        DU_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        DU_ce0 = 1'b1;
    end else begin
        DU_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        HTAC_length_address0 = sext_ln416_1_fu_1923_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        HTAC_length_address0 = 64'd0;
    end else begin
        HTAC_length_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state145))) begin
        HTAC_length_ce0 = 1'b1;
    end else begin
        HTAC_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        HTAC_length_ce1 = 1'b1;
    end else begin
        HTAC_length_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        HTAC_value_address0 = sext_ln416_1_fu_1923_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        HTAC_value_address0 = 64'd0;
    end else begin
        HTAC_value_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state145))) begin
        HTAC_value_ce0 = 1'b1;
    end else begin
        HTAC_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        HTAC_value_ce1 = 1'b1;
    end else begin
        HTAC_value_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        HTDC_length_address0 = sext_ln390_fu_1669_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        HTDC_length_address0 = 64'd0;
    end else begin
        HTDC_length_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        HTDC_length_ce0 = 1'b1;
    end else begin
        HTDC_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        HTDC_value_address0 = sext_ln390_fu_1669_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        HTDC_value_address0 = 64'd0;
    end else begin
        HTDC_value_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        HTDC_value_ce0 = 1'b1;
    end else begin
        HTDC_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        ap_return_0 = sext_ln383_reg_2061;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        ap_return_1 = bitStringCounts_writ_reg_1532;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_1548_p1 = zeroCounts_reg_2748;
    end else if ((1'b1 == ap_CS_fsm_state142)) begin
        grp_fu_1548_p1 = zeroCounts_fu_1778_p2;
    end else begin
        grp_fu_1548_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        outputBitString_length_address0 = sext_ln417_fu_1980_p1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        outputBitString_length_address0 = sext_ln416_fu_1960_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        outputBitString_length_address0 = sext_ln411_fu_1833_p1;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        outputBitString_length_address0 = sext_ln422_fu_1745_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11))) begin
        outputBitString_length_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        outputBitString_length_address0 = 64'd1;
    end else begin
        outputBitString_length_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state139))) begin
        outputBitString_length_ce0 = 1'b1;
    end else begin
        outputBitString_length_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        outputBitString_length_d0 = ret_length_1_reg_1519;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        outputBitString_length_d0 = zext_ln416_fu_1966_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        outputBitString_length_d0 = SIXTEEN_ZEROS_length_reg_2051;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        outputBitString_length_d0 = EOB_length_reg_2041;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outputBitString_length_d0 = zext_ln386_fu_1701_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outputBitString_length_d0 = zext_ln390_fu_1685_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        outputBitString_length_d0 = ret_length_reg_1164;
    end else begin
        outputBitString_length_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state147) | ((icmp_ln367_fu_1637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln407_reg_2764 == 1'd1) & (icmp_ln409_fu_1822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state144)) | ((icmp_ln399_fu_1728_p2 == 1'd1) & (icmp_ln420_fu_1733_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state139)))) begin
        outputBitString_length_we0 = 1'b1;
    end else begin
        outputBitString_length_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        outputBitString_value_address0 = sext_ln417_fu_1980_p1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        outputBitString_value_address0 = sext_ln416_fu_1960_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        outputBitString_value_address0 = sext_ln411_fu_1833_p1;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        outputBitString_value_address0 = sext_ln422_fu_1745_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outputBitString_value_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11))) begin
        outputBitString_value_address0 = 64'd0;
    end else begin
        outputBitString_value_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state139))) begin
        outputBitString_value_ce0 = 1'b1;
    end else begin
        outputBitString_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        outputBitString_value_d0 = ret_value_1_reg_2854;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        outputBitString_value_d0 = zext_ln416_1_fu_1970_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        outputBitString_value_d0 = SIXTEEN_ZEROS_value_reg_2056;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        outputBitString_value_d0 = EOB_value_reg_2046;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outputBitString_value_d0 = zext_ln386_1_fu_1706_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        outputBitString_value_d0 = ret_value_fu_1695_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outputBitString_value_d0 = zext_ln390_1_fu_1690_p1;
    end else begin
        outputBitString_value_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state147) | ((icmp_ln385_reg_2083 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln407_reg_2764 == 1'd1) & (icmp_ln409_fu_1822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state144)) | ((icmp_ln399_fu_1728_p2 == 1'd1) & (icmp_ln420_fu_1733_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state139)))) begin
        outputBitString_value_we0 = 1'b1;
    end else begin
        outputBitString_value_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln385_fu_1611_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln367_fu_1637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln395_reg_2140 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln395_1_reg_2154 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln395_2_reg_2163 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln395_3_reg_2172 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln395_4_reg_2181 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln395_5_reg_2190 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln395_6_reg_2199 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln395_7_reg_2208 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln395_8_reg_2217 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((icmp_ln395_9_reg_2226 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln395_10_reg_2235 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln395_11_reg_2244 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln395_12_reg_2253 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((icmp_ln395_13_reg_2262 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln395_14_reg_2271 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln395_15_reg_2280 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln395_16_reg_2289 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln395_17_reg_2298 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln395_18_reg_2307 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln395_19_reg_2316 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln395_20_reg_2325 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln395_21_reg_2334 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((icmp_ln395_22_reg_2343 == 1'd0) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln395_23_reg_2352 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln395_24_reg_2361 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((icmp_ln395_25_reg_2370 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((icmp_ln395_26_reg_2379 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((icmp_ln395_27_reg_2388 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((icmp_ln395_28_reg_2397 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln395_29_reg_2406 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln395_30_reg_2415 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln395_31_reg_2424 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln395_32_reg_2433 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((icmp_ln395_33_reg_2442 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((icmp_ln395_34_reg_2451 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln395_35_reg_2460 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((icmp_ln395_36_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((icmp_ln395_37_reg_2478 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((icmp_ln395_38_reg_2487 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((icmp_ln395_39_reg_2496 == 1'd0) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((icmp_ln395_40_reg_2505 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((icmp_ln395_41_reg_2514 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((icmp_ln395_42_reg_2523 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((icmp_ln395_43_reg_2532 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((icmp_ln395_44_reg_2541 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((icmp_ln395_45_reg_2550 == 1'd0) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            if (((icmp_ln395_46_reg_2559 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (((icmp_ln395_47_reg_2568 == 1'd0) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            if (((icmp_ln395_48_reg_2577 == 1'd0) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            if (((icmp_ln395_49_reg_2586 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            if (((icmp_ln395_50_reg_2595 == 1'd0) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            if (((icmp_ln395_51_reg_2604 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            if (((icmp_ln395_52_reg_2613 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            if (((icmp_ln395_53_reg_2622 == 1'd0) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            if (((icmp_ln395_54_reg_2631 == 1'd0) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            if (((icmp_ln395_55_reg_2640 == 1'd0) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            if (((icmp_ln395_56_reg_2649 == 1'd0) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            if (((icmp_ln395_57_reg_2658 == 1'd0) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            if (((icmp_ln395_58_reg_2667 == 1'd0) & (1'b1 == ap_CS_fsm_state129))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            if (((icmp_ln395_59_reg_2676 == 1'd0) & (1'b1 == ap_CS_fsm_state131))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            if (((icmp_ln395_60_reg_2685 == 1'd0) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if (((icmp_ln395_61_reg_2694 == 1'd0) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            if (((icmp_ln399_fu_1728_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state139))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if (((or_ln402_fu_1767_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state142))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & ((icmp_ln409_fu_1822_p2 == 1'd1) | (icmp_ln407_reg_2764 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        ap_ST_fsm_state145 : begin
            if (((icmp_ln367_1_fu_1879_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign EOB_length_fu_1569_p1 = HTAC_length_q0;

assign EOB_value_fu_1573_p1 = HTAC_value_q0;

assign HTAC_length_address1 = 64'd240;

assign HTAC_value_address1 = 64'd240;

assign SIXTEEN_ZEROS_length_fu_1577_p1 = HTAC_length_q1;

assign SIXTEEN_ZEROS_value_fu_1581_p1 = HTAC_value_q1;

assign add_ln371_1_fu_1680_p2 = ($signed(add_ln371_fu_1675_p2) + $signed(sext_ln383_3_reg_2077));

assign add_ln371_2_fu_1935_p2 = ($signed(12'd4095) + $signed(sext_ln415_cast21_ca_reg_2791));

assign add_ln371_3_fu_1943_p2 = ($signed(sext_ln371_fu_1940_p1) + $signed(shl_ln371_1_reg_2834));

assign add_ln371_fu_1675_p2 = ($signed(shl_ln371_reg_2125) + $signed(32'd4294967295));

assign add_ln409_fu_1812_p2 = (empty_139_fu_1804_p1 + empty_140_fu_1808_p1);

assign add_ln411_fu_1827_p2 = ($signed(index_2_reg_1479) + $signed(32'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign dcDiff_fu_1597_p2 = ($signed(sext_ln383_1_fu_1589_p1) - $signed(sext_ln383_2_fu_1593_p1));

assign empty_139_fu_1804_p1 = index_1_reg_1446[28:0];

assign empty_140_fu_1808_p1 = grp_fu_1548_p4;

assign grp_fu_1542_p2 = ((DU_q0 == 11'd0) ? 1'b1 : 1'b0);

assign grp_fu_1548_p4 = {{grp_fu_1548_p1[31:4]}};

assign i_2_fu_1929_p2 = ($signed(32'd1) + $signed(i_1_reg_1468));

assign i_fu_1772_p2 = ($signed(i_1_reg_1468) + $signed(32'd1));

assign icmp_ln365_1_fu_1851_p2 = (($signed(reg_1557) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln365_fu_1617_p2 = (($signed(dcDiff_reg_2066) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln367_1_fu_1879_p2 = ((v_0_i4_reg_1510 == 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln367_fu_1637_p2 = ((v_0_i_reg_1155 == 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln385_fu_1611_p1 = prevDC_read;

assign icmp_ln385_fu_1611_p2 = ((sext_ln383_fu_1585_p1 == icmp_ln385_fu_1611_p1) ? 1'b1 : 1'b0);

assign icmp_ln399_fu_1728_p2 = (($signed(startPos_reg_1456) > $signed(zext_ln399_reg_2713)) ? 1'b1 : 1'b0);

assign icmp_ln402_1_fu_1756_p2 = (($signed(zext_ln399_reg_2713) < $signed(i_1_reg_1468)) ? 1'b1 : 1'b0);

assign icmp_ln402_fu_1761_p2 = ((reg_1557 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln407_fu_1789_p2 = (($signed(tmp_137_reg_2759) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign icmp_ln409_fu_1822_p2 = ((trunc_ln409_fu_1818_p1 == add_ln409_reg_2773) ? 1'b1 : 1'b0);

assign icmp_ln420_fu_1733_p2 = ((endPos_0_lcssa_reg_1190 == 6'd63) ? 1'b1 : 1'b0);

assign index_4_fu_1798_p2 = ($signed(index_1_reg_1446) + $signed(zext_ln409_fu_1794_p1));

assign index_5_fu_1954_p2 = ($signed(32'd1) + $signed(index_3_reg_1489));

assign index_6_fu_1974_p2 = ($signed(32'd2) + $signed(index_3_reg_1489));

assign index_fu_1739_p2 = ($signed(index_1_reg_1446) + $signed(32'd1));

assign length_1_fu_1885_p2 = (ret_length_1_reg_1519 + 32'd1);

assign length_fu_1643_p2 = ($signed(ret_length_reg_1164) + $signed(32'd1));

assign not_icmp_ln395_62_fu_1715_p2 = ((DU_q0 != 11'd0) ? 1'b1 : 1'b0);

assign or_ln402_fu_1767_p2 = (icmp_ln402_fu_1761_p2 | icmp_ln402_1_reg_2735);

assign or_ln416_fu_1917_p2 = (shl_ln416_fu_1911_p2 | ret_length_1_reg_1519);

assign p_cast_fu_1721_p1 = not_icmp_ln395_62_reg_2703;

assign ret_value_1_fu_1948_p3 = ((icmp_ln365_1_reg_2796[0:0] === 1'b1) ? sext_ln415_reg_2786 : add_ln371_3_fu_1943_p2);

assign ret_value_fu_1695_p3 = ((icmp_ln365_reg_2087[0:0] === 1'b1) ? sext_ln383_3_reg_2077 : add_ln371_1_reg_2130);

assign select_ln365_fu_1627_p3 = ((icmp_ln365_fu_1617_p2[0:0] === 1'b1) ? trunc_ln383_reg_2071 : sub_ln365_fu_1622_p2);

assign sext_ln365_fu_1871_p1 = $signed(v_fu_1863_p3);

assign sext_ln367_1_fu_1901_p1 = $signed(tmp_138_fu_1891_p4);

assign sext_ln367_fu_1659_p1 = $signed(tmp_136_fu_1649_p4);

assign sext_ln371_fu_1940_p1 = $signed(add_ln371_2_reg_2839);

assign sext_ln383_1_fu_1589_p1 = reg_1557;

assign sext_ln383_2_fu_1593_p0 = prevDC_read;

assign sext_ln383_2_fu_1593_p1 = sext_ln383_2_fu_1593_p0;

assign sext_ln383_3_fu_1607_p1 = dcDiff_fu_1597_p2;

assign sext_ln383_fu_1585_p1 = reg_1557;

assign sext_ln390_fu_1669_p1 = ret_length_reg_1164;

assign sext_ln402_fu_1751_p1 = i_1_reg_1468;

assign sext_ln411_fu_1833_p1 = index_2_reg_1479;

assign sext_ln415_cast21_ca_fu_1847_p1 = reg_1557;

assign sext_ln415_fu_1843_p1 = reg_1557;

assign sext_ln416_1_fu_1923_p1 = $signed(or_ln416_fu_1917_p2);

assign sext_ln416_fu_1960_p1 = index_3_reg_1489;

assign sext_ln417_fu_1980_p1 = $signed(index_5_reg_2859);

assign sext_ln422_fu_1745_p1 = index_1_reg_1446;

assign shl_ln416_fu_1911_p2 = zeroCounts_0_reg_1500 << 32'd4;

assign sub_ln365_1_fu_1857_p2 = ($signed(12'd0) - $signed(sext_ln415_cast21_ca_fu_1847_p1));

assign sub_ln365_fu_1622_p2 = (16'd0 - trunc_ln383_reg_2071);

assign tmp_136_fu_1649_p4 = {{v_0_i_reg_1155[29:1]}};

assign tmp_138_fu_1891_p4 = {{v_0_i4_reg_1510[29:1]}};

assign trunc_ln383_fu_1603_p1 = dcDiff_fu_1597_p2[15:0];

assign trunc_ln409_fu_1818_p1 = index_2_reg_1479[28:0];

assign v_fu_1863_p3 = ((icmp_ln365_1_fu_1851_p2[0:0] === 1'b1) ? sext_ln415_cast21_ca_fu_1847_p1 : sub_ln365_1_fu_1857_p2);

assign zeroCounts_1_fu_1785_p1 = zeroCounts_fu_1778_p2[3:0];

assign zeroCounts_fu_1778_p2 = ($signed(i_1_reg_1468) - $signed(startPos_reg_1456));

assign zext_ln365_1_fu_1875_p1 = $unsigned(sext_ln365_fu_1871_p1);

assign zext_ln365_fu_1634_p1 = select_ln365_reg_2092;

assign zext_ln386_1_fu_1706_p1 = reg_1565;

assign zext_ln386_fu_1701_p1 = reg_1561;

assign zext_ln390_1_fu_1690_p1 = reg_1565;

assign zext_ln390_fu_1685_p1 = reg_1561;

assign zext_ln395_fu_1711_p1 = index_0_reg_1177;

assign zext_ln399_fu_1724_p1 = endPos_0_lcssa_reg_1190;

assign zext_ln409_fu_1794_p1 = grp_fu_1548_p4;

assign zext_ln413_fu_1839_p1 = zeroCounts_1_reg_2754;

assign zext_ln416_1_fu_1970_p1 = HTAC_value_load_2_reg_2849;

assign zext_ln416_fu_1966_p1 = HTAC_length_load_2_reg_2844;

always @ (posedge ap_clk) begin
    EOB_length_reg_2041[31:5] <= 27'b000000000000000000000000000;
    EOB_value_reg_2046[31:16] <= 16'b0000000000000000;
    SIXTEEN_ZEROS_length_reg_2051[31:5] <= 27'b000000000000000000000000000;
    SIXTEEN_ZEROS_value_reg_2056[31:16] <= 16'b0000000000000000;
    zext_ln395_reg_2144[31:2] <= 30'b000000000000000000000000000000;
    zext_ln399_reg_2713[31:6] <= 26'b00000000000000000000000000;
end

endmodule //p_doHuffmanEncoding
