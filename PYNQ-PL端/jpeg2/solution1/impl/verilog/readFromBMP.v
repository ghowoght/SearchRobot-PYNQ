// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readFromBMP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        JpegEncoder_buffer_address0,
        JpegEncoder_buffer_ce0,
        JpegEncoder_buffer_we0,
        JpegEncoder_buffer_d0,
        JpegEncoder_buffer_address1,
        JpegEncoder_buffer_ce1,
        JpegEncoder_buffer_we1,
        JpegEncoder_buffer_d1,
        rgb_in_TDATA,
        rgb_in_TVALID,
        rgb_in_TREADY,
        rgb_in_TKEEP,
        rgb_in_TSTRB,
        rgb_in_TLAST
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] JpegEncoder_buffer_address0;
output   JpegEncoder_buffer_ce0;
output   JpegEncoder_buffer_we0;
output  [7:0] JpegEncoder_buffer_d0;
output  [13:0] JpegEncoder_buffer_address1;
output   JpegEncoder_buffer_ce1;
output   JpegEncoder_buffer_we1;
output  [7:0] JpegEncoder_buffer_d1;
input  [23:0] rgb_in_TDATA;
input   rgb_in_TVALID;
output   rgb_in_TREADY;
input  [2:0] rgb_in_TKEEP;
input  [2:0] rgb_in_TSTRB;
input  [0:0] rgb_in_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] JpegEncoder_buffer_address0;
reg JpegEncoder_buffer_ce0;
reg JpegEncoder_buffer_we0;
reg[7:0] JpegEncoder_buffer_d0;
reg[13:0] JpegEncoder_buffer_address1;
reg JpegEncoder_buffer_ce1;
reg JpegEncoder_buffer_we1;
reg[7:0] JpegEncoder_buffer_d1;
reg rgb_in_TREADY;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rgb_in_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [7:0] reg_322;
wire  signed [15:0] sub_ln166_fu_349_p2;
reg  signed [15:0] sub_ln166_reg_858;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln163_fu_331_p2;
wire   [7:0] trunc_ln168_fu_374_p1;
reg   [7:0] trunc_ln168_reg_864;
wire  signed [15:0] sub_ln166_1_fu_400_p2;
reg  signed [15:0] sub_ln166_1_reg_869;
wire   [15:0] add_ln167_fu_428_p2;
reg   [15:0] add_ln167_reg_876;
wire   [7:0] trunc_ln168_1_fu_433_p1;
reg   [7:0] trunc_ln168_1_reg_881;
wire   [15:0] add_ln168_fu_437_p2;
reg   [15:0] add_ln168_reg_886;
wire  signed [15:0] sub_ln166_2_fu_480_p2;
reg  signed [15:0] sub_ln166_2_reg_891;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln168_2_fu_505_p1;
reg   [7:0] trunc_ln168_2_reg_897;
wire   [15:0] add_ln168_1_fu_509_p2;
reg   [15:0] add_ln168_1_reg_902;
wire  signed [15:0] sub_ln166_3_fu_536_p2;
reg  signed [15:0] sub_ln166_3_reg_907;
wire   [15:0] add_ln167_1_fu_558_p2;
reg   [15:0] add_ln167_1_reg_914;
wire   [7:0] trunc_ln168_3_fu_563_p1;
reg   [7:0] trunc_ln168_3_reg_919;
wire   [15:0] add_ln168_2_fu_567_p2;
reg   [15:0] add_ln168_2_reg_924;
wire  signed [15:0] sub_ln166_4_fu_610_p2;
reg  signed [15:0] sub_ln166_4_reg_929;
wire    ap_CS_fsm_state8;
wire   [7:0] trunc_ln168_4_fu_635_p1;
reg   [7:0] trunc_ln168_4_reg_935;
wire  signed [15:0] sub_ln166_5_fu_661_p2;
reg  signed [15:0] sub_ln166_5_reg_940;
wire   [15:0] add_ln167_2_fu_689_p2;
reg   [15:0] add_ln167_2_reg_947;
wire   [7:0] trunc_ln168_5_fu_694_p1;
reg   [7:0] trunc_ln168_5_reg_952;
wire   [15:0] add_ln168_3_fu_698_p2;
reg   [15:0] add_ln168_3_reg_957;
wire  signed [15:0] sub_ln166_6_fu_741_p2;
reg  signed [15:0] sub_ln166_6_reg_962;
wire    ap_CS_fsm_state11;
wire   [7:0] trunc_ln168_6_fu_766_p1;
reg   [7:0] trunc_ln168_6_reg_968;
wire   [15:0] add_ln168_4_fu_770_p2;
reg   [15:0] add_ln168_4_reg_973;
wire  signed [15:0] sub_ln166_7_fu_797_p2;
reg  signed [15:0] sub_ln166_7_reg_978;
wire   [12:0] add_ln163_fu_803_p2;
reg   [12:0] add_ln163_reg_985;
wire   [15:0] add_ln167_3_fu_825_p2;
reg   [15:0] add_ln167_3_reg_990;
wire   [7:0] trunc_ln168_7_fu_830_p1;
reg   [7:0] trunc_ln168_7_reg_995;
wire   [15:0] add_ln168_5_fu_834_p2;
reg   [15:0] add_ln168_5_reg_1000;
reg   [12:0] i_0_0_reg_283;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln166_fu_358_p1;
wire   [63:0] zext_ln167_fu_369_p1;
wire   [63:0] zext_ln168_fu_415_p1;
wire   [63:0] zext_ln166_1_fu_423_p1;
wire   [63:0] zext_ln167_1_fu_445_p1;
wire   [63:0] zext_ln168_1_fu_453_p1;
wire   [63:0] zext_ln166_2_fu_489_p1;
wire   [63:0] zext_ln167_2_fu_500_p1;
wire   [63:0] zext_ln168_2_fu_545_p1;
wire   [63:0] zext_ln166_3_fu_553_p1;
wire   [63:0] zext_ln167_3_fu_575_p1;
wire   [63:0] zext_ln168_3_fu_583_p1;
wire   [63:0] zext_ln166_4_fu_619_p1;
wire   [63:0] zext_ln167_4_fu_630_p1;
wire   [63:0] zext_ln168_4_fu_676_p1;
wire   [63:0] zext_ln166_5_fu_684_p1;
wire   [63:0] zext_ln167_5_fu_706_p1;
wire   [63:0] zext_ln168_5_fu_714_p1;
wire   [63:0] zext_ln166_6_fu_750_p1;
wire   [63:0] zext_ln167_6_fu_761_p1;
wire   [63:0] zext_ln168_6_fu_812_p1;
wire   [63:0] zext_ln166_7_fu_820_p1;
wire   [63:0] zext_ln167_7_fu_842_p1;
wire   [63:0] zext_ln168_7_fu_850_p1;
wire   [14:0] shl_ln_fu_337_p3;
wire   [15:0] zext_ln166_8_fu_345_p1;
wire   [15:0] i_0_0_cast8_fu_327_p1;
wire  signed [31:0] sext_ln166_fu_355_p1;
wire   [31:0] or_ln167_fu_363_p2;
wire   [12:0] or_ln163_fu_378_p2;
wire   [14:0] shl_ln166_1_fu_388_p3;
wire   [15:0] zext_ln166_9_fu_396_p1;
wire   [15:0] zext_ln163_fu_384_p1;
wire   [15:0] or_ln168_fu_406_p2;
wire  signed [31:0] sext_ln168_fu_411_p1;
wire  signed [31:0] sext_ln166_1_fu_420_p1;
wire  signed [31:0] sext_ln167_fu_442_p1;
wire  signed [31:0] sext_ln168_1_fu_450_p1;
wire   [12:0] or_ln163_1_fu_458_p2;
wire   [14:0] shl_ln166_2_fu_468_p3;
wire   [15:0] zext_ln166_10_fu_476_p1;
wire   [15:0] zext_ln163_1_fu_464_p1;
wire  signed [31:0] sext_ln166_2_fu_486_p1;
wire   [31:0] or_ln167_1_fu_494_p2;
wire   [12:0] or_ln163_2_fu_514_p2;
wire   [14:0] shl_ln166_3_fu_524_p3;
wire   [15:0] zext_ln166_11_fu_532_p1;
wire   [15:0] zext_ln163_2_fu_520_p1;
wire  signed [31:0] sext_ln168_2_fu_542_p1;
wire  signed [31:0] sext_ln166_3_fu_550_p1;
wire  signed [31:0] sext_ln167_1_fu_572_p1;
wire  signed [31:0] sext_ln168_3_fu_580_p1;
wire   [12:0] or_ln163_3_fu_588_p2;
wire   [14:0] shl_ln166_4_fu_598_p3;
wire   [15:0] zext_ln166_12_fu_606_p1;
wire   [15:0] zext_ln163_3_fu_594_p1;
wire  signed [31:0] sext_ln166_4_fu_616_p1;
wire   [31:0] or_ln167_2_fu_624_p2;
wire   [12:0] or_ln163_4_fu_639_p2;
wire   [14:0] shl_ln166_5_fu_649_p3;
wire   [15:0] zext_ln166_13_fu_657_p1;
wire   [15:0] zext_ln163_4_fu_645_p1;
wire   [15:0] or_ln168_1_fu_667_p2;
wire  signed [31:0] sext_ln168_4_fu_672_p1;
wire  signed [31:0] sext_ln166_5_fu_681_p1;
wire  signed [31:0] sext_ln167_2_fu_703_p1;
wire  signed [31:0] sext_ln168_5_fu_711_p1;
wire   [12:0] or_ln163_5_fu_719_p2;
wire   [14:0] shl_ln166_6_fu_729_p3;
wire   [15:0] zext_ln166_14_fu_737_p1;
wire   [15:0] zext_ln163_5_fu_725_p1;
wire  signed [31:0] sext_ln166_6_fu_747_p1;
wire   [31:0] or_ln167_3_fu_755_p2;
wire   [12:0] or_ln163_6_fu_775_p2;
wire   [14:0] shl_ln166_7_fu_785_p3;
wire   [15:0] zext_ln166_15_fu_793_p1;
wire   [15:0] zext_ln163_6_fu_781_p1;
wire  signed [31:0] sext_ln168_6_fu_809_p1;
wire  signed [31:0] sext_ln166_7_fu_817_p1;
wire  signed [31:0] sext_ln167_3_fu_839_p1;
wire  signed [31:0] sext_ln168_7_fu_847_p1;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_0_reg_283 <= add_ln163_reg_985;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_0_reg_283 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        add_ln163_reg_985 <= add_ln163_fu_803_p2;
        add_ln168_4_reg_973 <= add_ln168_4_fu_770_p2;
        sub_ln166_7_reg_978[15 : 3] <= sub_ln166_7_fu_797_p2[15 : 3];
        trunc_ln168_6_reg_968 <= trunc_ln168_6_fu_766_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln167_1_reg_914[15 : 2] <= add_ln167_1_fu_558_p2[15 : 2];
        add_ln168_2_reg_924[15 : 2] <= add_ln168_2_fu_567_p2[15 : 2];
        trunc_ln168_3_reg_919 <= trunc_ln168_3_fu_563_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln167_2_reg_947[15 : 1] <= add_ln167_2_fu_689_p2[15 : 1];
        add_ln168_3_reg_957[15 : 1] <= add_ln168_3_fu_698_p2[15 : 1];
        trunc_ln168_5_reg_952 <= trunc_ln168_5_fu_694_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln167_3_reg_990[15 : 3] <= add_ln167_3_fu_825_p2[15 : 3];
        add_ln168_5_reg_1000[15 : 3] <= add_ln168_5_fu_834_p2[15 : 3];
        trunc_ln168_7_reg_995 <= trunc_ln168_7_fu_830_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln167_reg_876[15 : 1] <= add_ln167_fu_428_p2[15 : 1];
        add_ln168_reg_886[15 : 1] <= add_ln168_fu_437_p2[15 : 1];
        trunc_ln168_1_reg_881 <= trunc_ln168_1_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln168_1_reg_902 <= add_ln168_1_fu_509_p2;
        sub_ln166_3_reg_907[15 : 2] <= sub_ln166_3_fu_536_p2[15 : 2];
        trunc_ln168_2_reg_897 <= trunc_ln168_2_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_322 <= {{rgb_in_TDATA[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln166_1_reg_869[15 : 1] <= sub_ln166_1_fu_400_p2[15 : 1];
        trunc_ln168_reg_864 <= trunc_ln168_fu_374_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sub_ln166_2_reg_891 <= sub_ln166_2_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_ln166_4_reg_929 <= sub_ln166_4_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        sub_ln166_5_reg_940[15 : 1] <= sub_ln166_5_fu_661_p2[15 : 1];
        trunc_ln168_4_reg_935 <= trunc_ln168_4_fu_635_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_ln166_6_reg_962 <= sub_ln166_6_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln163_fu_331_p2 == 1'd0))) begin
        sub_ln166_reg_858 <= sub_ln166_fu_349_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        JpegEncoder_buffer_address0 = zext_ln167_7_fu_842_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        JpegEncoder_buffer_address0 = zext_ln168_6_fu_812_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        JpegEncoder_buffer_address0 = zext_ln166_6_fu_750_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        JpegEncoder_buffer_address0 = zext_ln167_5_fu_706_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        JpegEncoder_buffer_address0 = zext_ln168_4_fu_676_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        JpegEncoder_buffer_address0 = zext_ln166_4_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        JpegEncoder_buffer_address0 = zext_ln167_3_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        JpegEncoder_buffer_address0 = zext_ln168_2_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        JpegEncoder_buffer_address0 = zext_ln166_2_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        JpegEncoder_buffer_address0 = zext_ln167_1_fu_445_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        JpegEncoder_buffer_address0 = zext_ln168_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        JpegEncoder_buffer_address0 = zext_ln166_fu_358_p1;
    end else begin
        JpegEncoder_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        JpegEncoder_buffer_address1 = zext_ln168_7_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        JpegEncoder_buffer_address1 = zext_ln166_7_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        JpegEncoder_buffer_address1 = zext_ln167_6_fu_761_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        JpegEncoder_buffer_address1 = zext_ln168_5_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        JpegEncoder_buffer_address1 = zext_ln166_5_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        JpegEncoder_buffer_address1 = zext_ln167_4_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        JpegEncoder_buffer_address1 = zext_ln168_3_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        JpegEncoder_buffer_address1 = zext_ln166_3_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        JpegEncoder_buffer_address1 = zext_ln167_2_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        JpegEncoder_buffer_address1 = zext_ln168_1_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        JpegEncoder_buffer_address1 = zext_ln166_1_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        JpegEncoder_buffer_address1 = zext_ln167_fu_369_p1;
    end else begin
        JpegEncoder_buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        JpegEncoder_buffer_ce0 = 1'b1;
    end else begin
        JpegEncoder_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        JpegEncoder_buffer_ce1 = 1'b1;
    end else begin
        JpegEncoder_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        JpegEncoder_buffer_d0 = trunc_ln168_6_reg_968;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        JpegEncoder_buffer_d0 = trunc_ln168_4_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        JpegEncoder_buffer_d0 = trunc_ln168_2_reg_897;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        JpegEncoder_buffer_d0 = reg_322;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        JpegEncoder_buffer_d0 = trunc_ln168_reg_864;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        JpegEncoder_buffer_d0 = {{rgb_in_TDATA[23:16]}};
    end else begin
        JpegEncoder_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        JpegEncoder_buffer_d1 = trunc_ln168_7_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        JpegEncoder_buffer_d1 = trunc_ln168_5_reg_952;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        JpegEncoder_buffer_d1 = trunc_ln168_3_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        JpegEncoder_buffer_d1 = trunc_ln168_1_reg_881;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        JpegEncoder_buffer_d1 = {{rgb_in_TDATA[23:16]}};
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        JpegEncoder_buffer_d1 = {{rgb_in_TDATA[15:8]}};
    end else begin
        JpegEncoder_buffer_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        JpegEncoder_buffer_we0 = 1'b1;
    end else begin
        JpegEncoder_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        JpegEncoder_buffer_we1 = 1'b1;
    end else begin
        JpegEncoder_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln163_fu_331_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln163_fu_331_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        rgb_in_TDATA_blk_n = rgb_in_TVALID;
    end else begin
        rgb_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        rgb_in_TREADY = 1'b1;
    end else begin
        rgb_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln163_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((rgb_in_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln163_fu_803_p2 = (13'd8 + i_0_0_reg_283);

assign add_ln167_1_fu_558_p2 = ($signed(16'd1) + $signed(sub_ln166_3_reg_907));

assign add_ln167_2_fu_689_p2 = ($signed(16'd1) + $signed(sub_ln166_5_reg_940));

assign add_ln167_3_fu_825_p2 = ($signed(16'd1) + $signed(sub_ln166_7_reg_978));

assign add_ln167_fu_428_p2 = ($signed(16'd1) + $signed(sub_ln166_1_reg_869));

assign add_ln168_1_fu_509_p2 = ($signed(16'd2) + $signed(sub_ln166_2_reg_891));

assign add_ln168_2_fu_567_p2 = ($signed(16'd2) + $signed(sub_ln166_3_reg_907));

assign add_ln168_3_fu_698_p2 = ($signed(16'd2) + $signed(sub_ln166_5_reg_940));

assign add_ln168_4_fu_770_p2 = ($signed(16'd2) + $signed(sub_ln166_6_reg_962));

assign add_ln168_5_fu_834_p2 = ($signed(16'd2) + $signed(sub_ln166_7_reg_978));

assign add_ln168_fu_437_p2 = ($signed(16'd2) + $signed(sub_ln166_1_reg_869));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_0_0_cast8_fu_327_p1 = i_0_0_reg_283;

assign icmp_ln163_fu_331_p2 = ((i_0_0_reg_283 == 13'd5120) ? 1'b1 : 1'b0);

assign or_ln163_1_fu_458_p2 = (i_0_0_reg_283 | 13'd2);

assign or_ln163_2_fu_514_p2 = (i_0_0_reg_283 | 13'd3);

assign or_ln163_3_fu_588_p2 = (i_0_0_reg_283 | 13'd4);

assign or_ln163_4_fu_639_p2 = (i_0_0_reg_283 | 13'd5);

assign or_ln163_5_fu_719_p2 = (i_0_0_reg_283 | 13'd6);

assign or_ln163_6_fu_775_p2 = (i_0_0_reg_283 | 13'd7);

assign or_ln163_fu_378_p2 = (i_0_0_reg_283 | 13'd1);

assign or_ln167_1_fu_494_p2 = (sext_ln166_2_fu_486_p1 | 32'd1);

assign or_ln167_2_fu_624_p2 = (sext_ln166_4_fu_616_p1 | 32'd1);

assign or_ln167_3_fu_755_p2 = (sext_ln166_6_fu_747_p1 | 32'd1);

assign or_ln167_fu_363_p2 = (sext_ln166_fu_355_p1 | 32'd1);

assign or_ln168_1_fu_667_p2 = (sub_ln166_4_reg_929 | 16'd2);

assign or_ln168_fu_406_p2 = (sub_ln166_reg_858 | 16'd2);

assign sext_ln166_1_fu_420_p1 = sub_ln166_1_reg_869;

assign sext_ln166_2_fu_486_p1 = sub_ln166_2_reg_891;

assign sext_ln166_3_fu_550_p1 = sub_ln166_3_reg_907;

assign sext_ln166_4_fu_616_p1 = sub_ln166_4_reg_929;

assign sext_ln166_5_fu_681_p1 = sub_ln166_5_reg_940;

assign sext_ln166_6_fu_747_p1 = sub_ln166_6_reg_962;

assign sext_ln166_7_fu_817_p1 = sub_ln166_7_reg_978;

assign sext_ln166_fu_355_p1 = sub_ln166_reg_858;

assign sext_ln167_1_fu_572_p1 = $signed(add_ln167_1_reg_914);

assign sext_ln167_2_fu_703_p1 = $signed(add_ln167_2_reg_947);

assign sext_ln167_3_fu_839_p1 = $signed(add_ln167_3_reg_990);

assign sext_ln167_fu_442_p1 = $signed(add_ln167_reg_876);

assign sext_ln168_1_fu_450_p1 = $signed(add_ln168_reg_886);

assign sext_ln168_2_fu_542_p1 = $signed(add_ln168_1_reg_902);

assign sext_ln168_3_fu_580_p1 = $signed(add_ln168_2_reg_924);

assign sext_ln168_4_fu_672_p1 = $signed(or_ln168_1_fu_667_p2);

assign sext_ln168_5_fu_711_p1 = $signed(add_ln168_3_reg_957);

assign sext_ln168_6_fu_809_p1 = $signed(add_ln168_4_reg_973);

assign sext_ln168_7_fu_847_p1 = $signed(add_ln168_5_reg_1000);

assign sext_ln168_fu_411_p1 = $signed(or_ln168_fu_406_p2);

assign shl_ln166_1_fu_388_p3 = {{or_ln163_fu_378_p2}, {2'd0}};

assign shl_ln166_2_fu_468_p3 = {{or_ln163_1_fu_458_p2}, {2'd0}};

assign shl_ln166_3_fu_524_p3 = {{or_ln163_2_fu_514_p2}, {2'd0}};

assign shl_ln166_4_fu_598_p3 = {{or_ln163_3_fu_588_p2}, {2'd0}};

assign shl_ln166_5_fu_649_p3 = {{or_ln163_4_fu_639_p2}, {2'd0}};

assign shl_ln166_6_fu_729_p3 = {{or_ln163_5_fu_719_p2}, {2'd0}};

assign shl_ln166_7_fu_785_p3 = {{or_ln163_6_fu_775_p2}, {2'd0}};

assign shl_ln_fu_337_p3 = {{i_0_0_reg_283}, {2'd0}};

assign sub_ln166_1_fu_400_p2 = (zext_ln166_9_fu_396_p1 - zext_ln163_fu_384_p1);

assign sub_ln166_2_fu_480_p2 = (zext_ln166_10_fu_476_p1 - zext_ln163_1_fu_464_p1);

assign sub_ln166_3_fu_536_p2 = (zext_ln166_11_fu_532_p1 - zext_ln163_2_fu_520_p1);

assign sub_ln166_4_fu_610_p2 = (zext_ln166_12_fu_606_p1 - zext_ln163_3_fu_594_p1);

assign sub_ln166_5_fu_661_p2 = (zext_ln166_13_fu_657_p1 - zext_ln163_4_fu_645_p1);

assign sub_ln166_6_fu_741_p2 = (zext_ln166_14_fu_737_p1 - zext_ln163_5_fu_725_p1);

assign sub_ln166_7_fu_797_p2 = (zext_ln166_15_fu_793_p1 - zext_ln163_6_fu_781_p1);

assign sub_ln166_fu_349_p2 = (zext_ln166_8_fu_345_p1 - i_0_0_cast8_fu_327_p1);

assign trunc_ln168_1_fu_433_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_2_fu_505_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_3_fu_563_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_4_fu_635_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_5_fu_694_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_6_fu_766_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_7_fu_830_p1 = rgb_in_TDATA[7:0];

assign trunc_ln168_fu_374_p1 = rgb_in_TDATA[7:0];

assign zext_ln163_1_fu_464_p1 = or_ln163_1_fu_458_p2;

assign zext_ln163_2_fu_520_p1 = or_ln163_2_fu_514_p2;

assign zext_ln163_3_fu_594_p1 = or_ln163_3_fu_588_p2;

assign zext_ln163_4_fu_645_p1 = or_ln163_4_fu_639_p2;

assign zext_ln163_5_fu_725_p1 = or_ln163_5_fu_719_p2;

assign zext_ln163_6_fu_781_p1 = or_ln163_6_fu_775_p2;

assign zext_ln163_fu_384_p1 = or_ln163_fu_378_p2;

assign zext_ln166_10_fu_476_p1 = shl_ln166_2_fu_468_p3;

assign zext_ln166_11_fu_532_p1 = shl_ln166_3_fu_524_p3;

assign zext_ln166_12_fu_606_p1 = shl_ln166_4_fu_598_p3;

assign zext_ln166_13_fu_657_p1 = shl_ln166_5_fu_649_p3;

assign zext_ln166_14_fu_737_p1 = shl_ln166_6_fu_729_p3;

assign zext_ln166_15_fu_793_p1 = shl_ln166_7_fu_785_p3;

assign zext_ln166_1_fu_423_p1 = $unsigned(sext_ln166_1_fu_420_p1);

assign zext_ln166_2_fu_489_p1 = $unsigned(sext_ln166_2_fu_486_p1);

assign zext_ln166_3_fu_553_p1 = $unsigned(sext_ln166_3_fu_550_p1);

assign zext_ln166_4_fu_619_p1 = $unsigned(sext_ln166_4_fu_616_p1);

assign zext_ln166_5_fu_684_p1 = $unsigned(sext_ln166_5_fu_681_p1);

assign zext_ln166_6_fu_750_p1 = $unsigned(sext_ln166_6_fu_747_p1);

assign zext_ln166_7_fu_820_p1 = $unsigned(sext_ln166_7_fu_817_p1);

assign zext_ln166_8_fu_345_p1 = shl_ln_fu_337_p3;

assign zext_ln166_9_fu_396_p1 = shl_ln166_1_fu_388_p3;

assign zext_ln166_fu_358_p1 = $unsigned(sext_ln166_fu_355_p1);

assign zext_ln167_1_fu_445_p1 = $unsigned(sext_ln167_fu_442_p1);

assign zext_ln167_2_fu_500_p1 = or_ln167_1_fu_494_p2;

assign zext_ln167_3_fu_575_p1 = $unsigned(sext_ln167_1_fu_572_p1);

assign zext_ln167_4_fu_630_p1 = or_ln167_2_fu_624_p2;

assign zext_ln167_5_fu_706_p1 = $unsigned(sext_ln167_2_fu_703_p1);

assign zext_ln167_6_fu_761_p1 = or_ln167_3_fu_755_p2;

assign zext_ln167_7_fu_842_p1 = $unsigned(sext_ln167_3_fu_839_p1);

assign zext_ln167_fu_369_p1 = or_ln167_fu_363_p2;

assign zext_ln168_1_fu_453_p1 = $unsigned(sext_ln168_1_fu_450_p1);

assign zext_ln168_2_fu_545_p1 = $unsigned(sext_ln168_2_fu_542_p1);

assign zext_ln168_3_fu_583_p1 = $unsigned(sext_ln168_3_fu_580_p1);

assign zext_ln168_4_fu_676_p1 = $unsigned(sext_ln168_4_fu_672_p1);

assign zext_ln168_5_fu_714_p1 = $unsigned(sext_ln168_5_fu_711_p1);

assign zext_ln168_6_fu_812_p1 = $unsigned(sext_ln168_6_fu_809_p1);

assign zext_ln168_7_fu_850_p1 = $unsigned(sext_ln168_7_fu_847_p1);

assign zext_ln168_fu_415_p1 = $unsigned(sext_ln168_fu_411_p1);

always @ (posedge ap_clk) begin
    sub_ln166_1_reg_869[0] <= 1'b1;
    add_ln167_reg_876[0] <= 1'b0;
    add_ln168_reg_886[0] <= 1'b1;
    sub_ln166_3_reg_907[1:0] <= 2'b01;
    add_ln167_1_reg_914[1:0] <= 2'b10;
    add_ln168_2_reg_924[1:0] <= 2'b11;
    sub_ln166_5_reg_940[0] <= 1'b1;
    add_ln167_2_reg_947[0] <= 1'b0;
    add_ln168_3_reg_957[0] <= 1'b1;
    sub_ln166_7_reg_978[2:0] <= 3'b101;
    add_ln167_3_reg_990[2:0] <= 3'b110;
    add_ln168_5_reg_1000[2:0] <= 3'b111;
end

endmodule //readFromBMP
