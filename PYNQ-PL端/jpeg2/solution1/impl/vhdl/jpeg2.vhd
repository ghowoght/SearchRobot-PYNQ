-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    rgb_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    rgb_in_TVALID : IN STD_LOGIC;
    rgb_in_TREADY : OUT STD_LOGIC;
    rgb_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    rgb_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    rgb_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    jpeg_out_TVALID : OUT STD_LOGIC;
    jpeg_out_TREADY : IN STD_LOGIC;
    jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of jpeg2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "jpeg2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.520000,HLS_SYN_LAT=71664823,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=115,HLS_SYN_FF=15509,HLS_SYN_LUT=33684,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_D9 : STD_LOGIC_VECTOR (7 downto 0) := "11011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal jpeg_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal jpeg1_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal jpeg1_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal jpeg1_m_YTable_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal jpeg1_m_CbCrTable_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal jpeg1_m_Y_DC_Huffman_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_Y_DC_Huffman_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal jpeg1_m_Y_AC_Huffman_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_Y_AC_Huffman_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_Y_AC_Huffman_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal jpeg1_m_Y_AC_Huffman_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal jpeg1_m_CbCr_DC_Huff_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_CbCr_DC_Huff_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal jpeg1_m_CbCr_AC_Huff_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_CbCr_AC_Huff_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal jpeg1_m_CbCr_AC_Huff_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal jpeg1_m_CbCr_AC_Huff_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encodeToJPG_fu_116_ap_start : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_ap_done : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_ap_idle : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_ap_ready : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_we1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_we0 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce1 : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_rgb_in_TREADY : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encodeToJPG_fu_116_jpeg_out_TVALID : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_jpeg_out_TREADY : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encodeToJPG_fu_116_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encodeToJPG_fu_116_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_184_ap_start : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_ap_done : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_ap_idle : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_ap_ready : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_184_value_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_184_jpeg_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_184_jpeg_out_TVALID : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_jpeg_out_TREADY : STD_LOGIC;
    signal grp_p_write_byte_s_fu_184_jpeg_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_184_jpeg_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_184_jpeg_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_write_byte_s_fu_184_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_write_byte_s_fu_184_ap_ce : STD_LOGIC;
    signal grp_encodeToJPG_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component encodeToJPG IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        JpegEncoder_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        JpegEncoder_buffer_ce0 : OUT STD_LOGIC;
        JpegEncoder_buffer_we0 : OUT STD_LOGIC;
        JpegEncoder_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_buffer_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_buffer_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        JpegEncoder_buffer_ce1 : OUT STD_LOGIC;
        JpegEncoder_buffer_we1 : OUT STD_LOGIC;
        JpegEncoder_buffer_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_buffer_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_YTable_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        JpegEncoder_m_YTable_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_YTable_we0 : OUT STD_LOGIC;
        JpegEncoder_m_YTable_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_YTable_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCrTable_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        JpegEncoder_m_CbCrTable_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCrTable_we0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCrTable_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCrTable_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_length_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_length_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_DC_Huffman_Table_length_we0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_DC_Huffman_Table_length_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_length_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_value_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_DC_Huffman_Table_value_we0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_DC_Huffman_Table_value_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_Y_DC_Huffman_Table_value_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_length_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_length_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_length_we0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_length_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_length_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_length_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_length_ce1 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_length_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_value_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_value_we0 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_value_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_value_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_value_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_Y_AC_Huffman_Table_value_ce1 : OUT STD_LOGIC;
        JpegEncoder_m_Y_AC_Huffman_Table_value_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_we0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_we0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_we0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce1 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_we0 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce1 : OUT STD_LOGIC;
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rgb_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        rgb_in_TVALID : IN STD_LOGIC;
        rgb_in_TREADY : OUT STD_LOGIC;
        rgb_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        rgb_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        rgb_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component p_write_byte_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        JpegEncoder_outhebyte_last_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        value_r : IN STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TVALID : OUT STD_LOGIC;
        jpeg_out_TREADY : IN STD_LOGIC;
        jpeg_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        jpeg_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        jpeg_out_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component jpeg2_jpeg1_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component jpeg2_jpeg1_m_YTabbk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component jpeg2_jpeg1_m_Y_Dbdk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component jpeg2_jpeg1_m_Y_Dbek IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component jpeg2_jpeg1_m_Y_Abfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component jpeg2_jpeg1_m_Y_Abgk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component jpeg2_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    jpeg2_AXILiteS_s_axi_U : component jpeg2_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    jpeg1_buffer_U : component jpeg2_jpeg1_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 15360,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_d0,
        q0 => jpeg1_buffer_q0,
        address1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_address1,
        ce1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce1,
        we1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_we1,
        d1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_d1,
        q1 => jpeg1_buffer_q1);

    jpeg1_m_YTable_U : component jpeg2_jpeg1_m_YTabbk
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_d0,
        q0 => jpeg1_m_YTable_q0);

    jpeg1_m_CbCrTable_U : component jpeg2_jpeg1_m_YTabbk
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_d0,
        q0 => jpeg1_m_CbCrTable_q0);

    jpeg1_m_Y_DC_Huffman_U : component jpeg2_jpeg1_m_Y_Dbdk
    generic map (
        DataWidth => 5,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_d0,
        q0 => jpeg1_m_Y_DC_Huffman_q0);

    jpeg1_m_Y_DC_Huffman_1_U : component jpeg2_jpeg1_m_Y_Dbek
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_d0,
        q0 => jpeg1_m_Y_DC_Huffman_1_q0);

    jpeg1_m_Y_AC_Huffman_U : component jpeg2_jpeg1_m_Y_Abfk
    generic map (
        DataWidth => 5,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_d0,
        q0 => jpeg1_m_Y_AC_Huffman_q0,
        address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address1,
        ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce1,
        q1 => jpeg1_m_Y_AC_Huffman_q1);

    jpeg1_m_Y_AC_Huffman_1_U : component jpeg2_jpeg1_m_Y_Abgk
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_d0,
        q0 => jpeg1_m_Y_AC_Huffman_1_q0,
        address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address1,
        ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce1,
        q1 => jpeg1_m_Y_AC_Huffman_1_q1);

    jpeg1_m_CbCr_DC_Huff_U : component jpeg2_jpeg1_m_Y_Dbdk
    generic map (
        DataWidth => 5,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_d0,
        q0 => jpeg1_m_CbCr_DC_Huff_q0);

    jpeg1_m_CbCr_DC_Huff_1_U : component jpeg2_jpeg1_m_Y_Dbek
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_d0,
        q0 => jpeg1_m_CbCr_DC_Huff_1_q0);

    jpeg1_m_CbCr_AC_Huff_U : component jpeg2_jpeg1_m_Y_Abfk
    generic map (
        DataWidth => 5,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_d0,
        q0 => jpeg1_m_CbCr_AC_Huff_q0,
        address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address1,
        ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce1,
        q1 => jpeg1_m_CbCr_AC_Huff_q1);

    jpeg1_m_CbCr_AC_Huff_1_U : component jpeg2_jpeg1_m_Y_Abgk
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address0,
        ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce0,
        we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_we0,
        d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_d0,
        q0 => jpeg1_m_CbCr_AC_Huff_1_q0,
        address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address1,
        ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce1,
        q1 => jpeg1_m_CbCr_AC_Huff_1_q1);

    grp_encodeToJPG_fu_116 : component encodeToJPG
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encodeToJPG_fu_116_ap_start,
        ap_done => grp_encodeToJPG_fu_116_ap_done,
        ap_idle => grp_encodeToJPG_fu_116_ap_idle,
        ap_ready => grp_encodeToJPG_fu_116_ap_ready,
        JpegEncoder_buffer_address0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_address0,
        JpegEncoder_buffer_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce0,
        JpegEncoder_buffer_we0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_we0,
        JpegEncoder_buffer_d0 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_d0,
        JpegEncoder_buffer_q0 => jpeg1_buffer_q0,
        JpegEncoder_buffer_address1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_address1,
        JpegEncoder_buffer_ce1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_ce1,
        JpegEncoder_buffer_we1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_we1,
        JpegEncoder_buffer_d1 => grp_encodeToJPG_fu_116_JpegEncoder_buffer_d1,
        JpegEncoder_buffer_q1 => jpeg1_buffer_q1,
        JpegEncoder_m_YTable_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_address0,
        JpegEncoder_m_YTable_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_ce0,
        JpegEncoder_m_YTable_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_we0,
        JpegEncoder_m_YTable_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_YTable_d0,
        JpegEncoder_m_YTable_q0 => jpeg1_m_YTable_q0,
        JpegEncoder_m_CbCrTable_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_address0,
        JpegEncoder_m_CbCrTable_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_ce0,
        JpegEncoder_m_CbCrTable_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_we0,
        JpegEncoder_m_CbCrTable_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCrTable_d0,
        JpegEncoder_m_CbCrTable_q0 => jpeg1_m_CbCrTable_q0,
        JpegEncoder_m_Y_DC_Huffman_Table_length_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_address0,
        JpegEncoder_m_Y_DC_Huffman_Table_length_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_ce0,
        JpegEncoder_m_Y_DC_Huffman_Table_length_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_we0,
        JpegEncoder_m_Y_DC_Huffman_Table_length_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_length_d0,
        JpegEncoder_m_Y_DC_Huffman_Table_length_q0 => jpeg1_m_Y_DC_Huffman_q0,
        JpegEncoder_m_Y_DC_Huffman_Table_value_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_address0,
        JpegEncoder_m_Y_DC_Huffman_Table_value_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_ce0,
        JpegEncoder_m_Y_DC_Huffman_Table_value_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_we0,
        JpegEncoder_m_Y_DC_Huffman_Table_value_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_DC_Huffman_Table_value_d0,
        JpegEncoder_m_Y_DC_Huffman_Table_value_q0 => jpeg1_m_Y_DC_Huffman_1_q0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_we0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_d0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_q0 => jpeg1_m_Y_AC_Huffman_q0,
        JpegEncoder_m_Y_AC_Huffman_Table_length_address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_address1,
        JpegEncoder_m_Y_AC_Huffman_Table_length_ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_length_ce1,
        JpegEncoder_m_Y_AC_Huffman_Table_length_q1 => jpeg1_m_Y_AC_Huffman_q1,
        JpegEncoder_m_Y_AC_Huffman_Table_value_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address0,
        JpegEncoder_m_Y_AC_Huffman_Table_value_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce0,
        JpegEncoder_m_Y_AC_Huffman_Table_value_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_we0,
        JpegEncoder_m_Y_AC_Huffman_Table_value_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_d0,
        JpegEncoder_m_Y_AC_Huffman_Table_value_q0 => jpeg1_m_Y_AC_Huffman_1_q0,
        JpegEncoder_m_Y_AC_Huffman_Table_value_address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_address1,
        JpegEncoder_m_Y_AC_Huffman_Table_value_ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_Y_AC_Huffman_Table_value_ce1,
        JpegEncoder_m_Y_AC_Huffman_Table_value_q1 => jpeg1_m_Y_AC_Huffman_1_q1,
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_address0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_ce0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_we0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_length_d0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_length_q0 => jpeg1_m_CbCr_DC_Huff_q0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_address0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_ce0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_we0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_DC_Huffman_Table_value_d0,
        JpegEncoder_m_CbCr_DC_Huffman_Table_value_q0 => jpeg1_m_CbCr_DC_Huff_1_q0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_we0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_d0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_q0 => jpeg1_m_CbCr_AC_Huff_q0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_address1,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_length_ce1,
        JpegEncoder_m_CbCr_AC_Huffman_Table_length_q1 => jpeg1_m_CbCr_AC_Huff_q1,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_address0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_we0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_we0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_d0 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_d0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_q0 => jpeg1_m_CbCr_AC_Huff_1_q0,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_address1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_address1,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce1 => grp_encodeToJPG_fu_116_JpegEncoder_m_CbCr_AC_Huffman_Table_value_ce1,
        JpegEncoder_m_CbCr_AC_Huffman_Table_value_q1 => jpeg1_m_CbCr_AC_Huff_1_q1,
        rgb_in_TDATA => rgb_in_TDATA,
        rgb_in_TVALID => rgb_in_TVALID,
        rgb_in_TREADY => grp_encodeToJPG_fu_116_rgb_in_TREADY,
        rgb_in_TKEEP => rgb_in_TKEEP,
        rgb_in_TSTRB => rgb_in_TSTRB,
        rgb_in_TLAST => rgb_in_TLAST,
        jpeg_out_TDATA => grp_encodeToJPG_fu_116_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_encodeToJPG_fu_116_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_encodeToJPG_fu_116_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_encodeToJPG_fu_116_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_encodeToJPG_fu_116_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_encodeToJPG_fu_116_jpeg_out_TLAST);

    grp_p_write_byte_s_fu_184 : component p_write_byte_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_p_write_byte_s_fu_184_ap_start,
        ap_done => grp_p_write_byte_s_fu_184_ap_done,
        ap_idle => grp_p_write_byte_s_fu_184_ap_idle,
        ap_ready => grp_p_write_byte_s_fu_184_ap_ready,
        JpegEncoder_outhebyte_last_V_read => grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read,
        value_r => grp_p_write_byte_s_fu_184_value_r,
        jpeg_out_TDATA => grp_p_write_byte_s_fu_184_jpeg_out_TDATA,
        jpeg_out_TVALID => grp_p_write_byte_s_fu_184_jpeg_out_TVALID,
        jpeg_out_TREADY => grp_p_write_byte_s_fu_184_jpeg_out_TREADY,
        jpeg_out_TKEEP => grp_p_write_byte_s_fu_184_jpeg_out_TKEEP,
        jpeg_out_TSTRB => grp_p_write_byte_s_fu_184_jpeg_out_TSTRB,
        jpeg_out_TLAST => grp_p_write_byte_s_fu_184_jpeg_out_TLAST,
        ap_return => grp_p_write_byte_s_fu_184_ap_return,
        jpeg_out_TDATA_blk_n => grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n,
        ap_ce => grp_p_write_byte_s_fu_184_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_encodeToJPG_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encodeToJPG_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_encodeToJPG_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encodeToJPG_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_encodeToJPG_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_encodeToJPG_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n, ap_CS_fsm_state4)
    begin
        if (((grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n, ap_CS_fsm_state4)
    begin
        if (((grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_encodeToJPG_fu_116_ap_start <= grp_encodeToJPG_fu_116_ap_start_reg;
    grp_encodeToJPG_fu_116_jpeg_out_TREADY <= (jpeg_out_TREADY and ap_CS_fsm_state2);

    grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read <= ap_const_lv1_0;
        else 
            grp_p_write_byte_s_fu_184_JpegEncoder_outhebyte_last_V_read <= "X";
        end if; 
    end process;


    grp_p_write_byte_s_fu_184_ap_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_p_write_byte_s_fu_184_ap_ce <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_184_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_p_write_byte_s_fu_184_ap_start_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_p_write_byte_s_fu_184_ap_start <= ap_const_logic_1;
        else 
            grp_p_write_byte_s_fu_184_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_write_byte_s_fu_184_jpeg_out_TREADY <= ((jpeg_out_TREADY and ap_CS_fsm_state4) or (jpeg_out_TREADY and ap_CS_fsm_state3));

    grp_p_write_byte_s_fu_184_value_r_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_p_write_byte_s_fu_184_value_r <= ap_const_lv8_D9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_write_byte_s_fu_184_value_r <= ap_const_lv8_FF;
        else 
            grp_p_write_byte_s_fu_184_value_r <= "XXXXXXXX";
        end if; 
    end process;


    jpeg_out_TDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_jpeg_out_TDATA, grp_encodeToJPG_fu_116_jpeg_out_TVALID, grp_p_write_byte_s_fu_184_jpeg_out_TDATA, grp_p_write_byte_s_fu_184_jpeg_out_TVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TDATA <= grp_p_write_byte_s_fu_184_jpeg_out_TDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_encodeToJPG_fu_116_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TDATA <= grp_encodeToJPG_fu_116_jpeg_out_TDATA;
        else 
            jpeg_out_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    jpeg_out_TDATA_blk_n_assign_proc : process(grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            jpeg_out_TDATA_blk_n <= grp_p_write_byte_s_fu_184_jpeg_out_TDATA_blk_n;
        else 
            jpeg_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    jpeg_out_TKEEP_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_jpeg_out_TVALID, grp_encodeToJPG_fu_116_jpeg_out_TKEEP, grp_p_write_byte_s_fu_184_jpeg_out_TVALID, grp_p_write_byte_s_fu_184_jpeg_out_TKEEP, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TKEEP <= grp_p_write_byte_s_fu_184_jpeg_out_TKEEP;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_encodeToJPG_fu_116_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TKEEP <= grp_encodeToJPG_fu_116_jpeg_out_TKEEP;
        else 
            jpeg_out_TKEEP <= "X";
        end if; 
    end process;


    jpeg_out_TLAST_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_jpeg_out_TVALID, grp_encodeToJPG_fu_116_jpeg_out_TLAST, grp_p_write_byte_s_fu_184_jpeg_out_TVALID, grp_p_write_byte_s_fu_184_jpeg_out_TLAST, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TLAST <= grp_p_write_byte_s_fu_184_jpeg_out_TLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_encodeToJPG_fu_116_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TLAST <= grp_encodeToJPG_fu_116_jpeg_out_TLAST;
        else 
            jpeg_out_TLAST <= "X";
        end if; 
    end process;


    jpeg_out_TSTRB_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_jpeg_out_TVALID, grp_encodeToJPG_fu_116_jpeg_out_TSTRB, grp_p_write_byte_s_fu_184_jpeg_out_TVALID, grp_p_write_byte_s_fu_184_jpeg_out_TSTRB, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_write_byte_s_fu_184_jpeg_out_TVALID = ap_const_logic_1)))) then 
            jpeg_out_TSTRB <= grp_p_write_byte_s_fu_184_jpeg_out_TSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_encodeToJPG_fu_116_jpeg_out_TVALID = ap_const_logic_1))) then 
            jpeg_out_TSTRB <= grp_encodeToJPG_fu_116_jpeg_out_TSTRB;
        else 
            jpeg_out_TSTRB <= "X";
        end if; 
    end process;


    jpeg_out_TVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_encodeToJPG_fu_116_jpeg_out_TVALID, grp_p_write_byte_s_fu_184_jpeg_out_TVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            jpeg_out_TVALID <= grp_p_write_byte_s_fu_184_jpeg_out_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            jpeg_out_TVALID <= grp_encodeToJPG_fu_116_jpeg_out_TVALID;
        else 
            jpeg_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    rgb_in_TREADY_assign_proc : process(grp_encodeToJPG_fu_116_rgb_in_TREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rgb_in_TREADY <= grp_encodeToJPG_fu_116_rgb_in_TREADY;
        else 
            rgb_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
