-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readFromBMP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    JpegEncoder_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    JpegEncoder_buffer_ce0 : OUT STD_LOGIC;
    JpegEncoder_buffer_we0 : OUT STD_LOGIC;
    JpegEncoder_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    JpegEncoder_buffer_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    JpegEncoder_buffer_ce1 : OUT STD_LOGIC;
    JpegEncoder_buffer_we1 : OUT STD_LOGIC;
    JpegEncoder_buffer_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rgb_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    rgb_in_TVALID : IN STD_LOGIC;
    rgb_in_TREADY : OUT STD_LOGIC;
    rgb_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    rgb_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    rgb_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of readFromBMP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv13_1400 : STD_LOGIC_VECTOR (12 downto 0) := "1010000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_const_lv13_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000101";
    constant ap_const_lv13_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000110";
    constant ap_const_lv13_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000111";
    constant ap_const_lv13_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rgb_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln166_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln163_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln168_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln166_1_fu_400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_1_reg_869 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_reg_876 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln168_1_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_1_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_fu_437_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_reg_886 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_2_fu_480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_2_reg_891 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln168_2_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_2_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_1_fu_509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_1_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_3_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_3_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_1_fu_558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_1_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln168_3_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_3_reg_919 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_2_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_2_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_4_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_4_reg_929 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln168_4_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_4_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln166_5_fu_661_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_5_reg_940 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_2_fu_689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_2_reg_947 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln168_5_fu_694_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_5_reg_952 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_3_fu_698_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_3_reg_957 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_6_fu_741_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_6_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln168_6_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_6_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_4_fu_770_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_4_reg_973 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_7_fu_797_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln166_7_reg_978 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln163_fu_803_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln163_reg_985 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln167_3_fu_825_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln167_3_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln168_7_fu_830_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln168_7_reg_995 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln168_5_fu_834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln168_5_reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_0_reg_283 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln166_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_1_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_1_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_2_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_2_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_2_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_3_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_3_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_3_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_4_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_4_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_4_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_5_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_5_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_5_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_6_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_6_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_6_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_7_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_7_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_7_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_337_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_8_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_0_cast8_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln166_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln167_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_fu_378_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_1_fu_388_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_9_fu_396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln168_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln168_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln166_1_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln168_1_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_1_fu_458_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_2_fu_468_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_10_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_1_fu_464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln166_2_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln167_1_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_2_fu_514_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_3_fu_524_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_11_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_2_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln168_2_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln166_3_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_1_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln168_3_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_3_fu_588_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_4_fu_598_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_12_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_3_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln166_4_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln167_2_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_4_fu_639_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_5_fu_649_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_13_fu_657_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_4_fu_645_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln168_1_fu_667_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln168_4_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln166_5_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_2_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln168_5_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_5_fu_719_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_6_fu_729_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_14_fu_737_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_5_fu_725_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln166_6_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln167_3_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln163_6_fu_775_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln166_7_fu_785_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln166_15_fu_793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln163_6_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln168_6_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln166_7_fu_817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_3_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln168_7_fu_847_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_0_reg_283 <= add_ln163_reg_985;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_0_reg_283 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln163_reg_985 <= add_ln163_fu_803_p2;
                add_ln168_4_reg_973 <= add_ln168_4_fu_770_p2;
                    sub_ln166_7_reg_978(15 downto 3) <= sub_ln166_7_fu_797_p2(15 downto 3);
                trunc_ln168_6_reg_968 <= trunc_ln168_6_fu_766_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    add_ln167_1_reg_914(15 downto 2) <= add_ln167_1_fu_558_p2(15 downto 2);
                    add_ln168_2_reg_924(15 downto 2) <= add_ln168_2_fu_567_p2(15 downto 2);
                trunc_ln168_3_reg_919 <= trunc_ln168_3_fu_563_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    add_ln167_2_reg_947(15 downto 1) <= add_ln167_2_fu_689_p2(15 downto 1);
                    add_ln168_3_reg_957(15 downto 1) <= add_ln168_3_fu_698_p2(15 downto 1);
                trunc_ln168_5_reg_952 <= trunc_ln168_5_fu_694_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    add_ln167_3_reg_990(15 downto 3) <= add_ln167_3_fu_825_p2(15 downto 3);
                    add_ln168_5_reg_1000(15 downto 3) <= add_ln168_5_fu_834_p2(15 downto 3);
                trunc_ln168_7_reg_995 <= trunc_ln168_7_fu_830_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    add_ln167_reg_876(15 downto 1) <= add_ln167_fu_428_p2(15 downto 1);
                    add_ln168_reg_886(15 downto 1) <= add_ln168_fu_437_p2(15 downto 1);
                trunc_ln168_1_reg_881 <= trunc_ln168_1_fu_433_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln168_1_reg_902 <= add_ln168_1_fu_509_p2;
                    sub_ln166_3_reg_907(15 downto 2) <= sub_ln166_3_fu_536_p2(15 downto 2);
                trunc_ln168_2_reg_897 <= trunc_ln168_2_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_322 <= rgb_in_TDATA(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln166_1_reg_869(15 downto 1) <= sub_ln166_1_fu_400_p2(15 downto 1);
                trunc_ln168_reg_864 <= trunc_ln168_fu_374_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sub_ln166_2_reg_891 <= sub_ln166_2_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sub_ln166_4_reg_929 <= sub_ln166_4_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    sub_ln166_5_reg_940(15 downto 1) <= sub_ln166_5_fu_661_p2(15 downto 1);
                trunc_ln168_4_reg_935 <= trunc_ln168_4_fu_635_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sub_ln166_6_reg_962 <= sub_ln166_6_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln163_fu_331_p2 = ap_const_lv1_0))) then
                sub_ln166_reg_858 <= sub_ln166_fu_349_p2;
            end if;
        end if;
    end process;
    sub_ln166_1_reg_869(0) <= '1';
    add_ln167_reg_876(0) <= '0';
    add_ln168_reg_886(0) <= '1';
    sub_ln166_3_reg_907(1 downto 0) <= "01";
    add_ln167_1_reg_914(1 downto 0) <= "10";
    add_ln168_2_reg_924(1 downto 0) <= "11";
    sub_ln166_5_reg_940(0) <= '1';
    add_ln167_2_reg_947(0) <= '0';
    add_ln168_3_reg_957(0) <= '1';
    sub_ln166_7_reg_978(2 downto 0) <= "101";
    add_ln167_3_reg_990(2 downto 0) <= "110";
    add_ln168_5_reg_1000(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, icmp_ln163_fu_331_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln163_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    JpegEncoder_buffer_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, zext_ln166_fu_358_p1, zext_ln168_fu_415_p1, zext_ln167_1_fu_445_p1, zext_ln166_2_fu_489_p1, zext_ln168_2_fu_545_p1, zext_ln167_3_fu_575_p1, zext_ln166_4_fu_619_p1, zext_ln168_4_fu_676_p1, zext_ln167_5_fu_706_p1, zext_ln166_6_fu_750_p1, zext_ln168_6_fu_812_p1, zext_ln167_7_fu_842_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            JpegEncoder_buffer_address0 <= zext_ln167_7_fu_842_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            JpegEncoder_buffer_address0 <= zext_ln168_6_fu_812_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            JpegEncoder_buffer_address0 <= zext_ln166_6_fu_750_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            JpegEncoder_buffer_address0 <= zext_ln167_5_fu_706_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            JpegEncoder_buffer_address0 <= zext_ln168_4_fu_676_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            JpegEncoder_buffer_address0 <= zext_ln166_4_fu_619_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            JpegEncoder_buffer_address0 <= zext_ln167_3_fu_575_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            JpegEncoder_buffer_address0 <= zext_ln168_2_fu_545_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            JpegEncoder_buffer_address0 <= zext_ln166_2_fu_489_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            JpegEncoder_buffer_address0 <= zext_ln167_1_fu_445_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            JpegEncoder_buffer_address0 <= zext_ln168_fu_415_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            JpegEncoder_buffer_address0 <= zext_ln166_fu_358_p1(14 - 1 downto 0);
        else 
            JpegEncoder_buffer_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    JpegEncoder_buffer_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, zext_ln167_fu_369_p1, zext_ln166_1_fu_423_p1, zext_ln168_1_fu_453_p1, zext_ln167_2_fu_500_p1, zext_ln166_3_fu_553_p1, zext_ln168_3_fu_583_p1, zext_ln167_4_fu_630_p1, zext_ln166_5_fu_684_p1, zext_ln168_5_fu_714_p1, zext_ln167_6_fu_761_p1, zext_ln166_7_fu_820_p1, zext_ln168_7_fu_850_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            JpegEncoder_buffer_address1 <= zext_ln168_7_fu_850_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            JpegEncoder_buffer_address1 <= zext_ln166_7_fu_820_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            JpegEncoder_buffer_address1 <= zext_ln167_6_fu_761_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            JpegEncoder_buffer_address1 <= zext_ln168_5_fu_714_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            JpegEncoder_buffer_address1 <= zext_ln166_5_fu_684_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            JpegEncoder_buffer_address1 <= zext_ln167_4_fu_630_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            JpegEncoder_buffer_address1 <= zext_ln168_3_fu_583_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            JpegEncoder_buffer_address1 <= zext_ln166_3_fu_553_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            JpegEncoder_buffer_address1 <= zext_ln167_2_fu_500_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            JpegEncoder_buffer_address1 <= zext_ln168_1_fu_453_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            JpegEncoder_buffer_address1 <= zext_ln166_1_fu_423_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            JpegEncoder_buffer_address1 <= zext_ln167_fu_369_p1(14 - 1 downto 0);
        else 
            JpegEncoder_buffer_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    JpegEncoder_buffer_ce0_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            JpegEncoder_buffer_ce0 <= ap_const_logic_1;
        else 
            JpegEncoder_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    JpegEncoder_buffer_ce1_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            JpegEncoder_buffer_ce1 <= ap_const_logic_1;
        else 
            JpegEncoder_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    JpegEncoder_buffer_d0_assign_proc : process(rgb_in_TDATA, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, reg_322, trunc_ln168_reg_864, ap_CS_fsm_state5, trunc_ln168_2_reg_897, ap_CS_fsm_state8, trunc_ln168_4_reg_935, ap_CS_fsm_state11, trunc_ln168_6_reg_968, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            JpegEncoder_buffer_d0 <= trunc_ln168_6_reg_968;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            JpegEncoder_buffer_d0 <= trunc_ln168_4_reg_935;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            JpegEncoder_buffer_d0 <= trunc_ln168_2_reg_897;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            JpegEncoder_buffer_d0 <= reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            JpegEncoder_buffer_d0 <= trunc_ln168_reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            JpegEncoder_buffer_d0 <= rgb_in_TDATA(23 downto 16);
        else 
            JpegEncoder_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    JpegEncoder_buffer_d1_assign_proc : process(rgb_in_TDATA, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, trunc_ln168_1_reg_881, ap_CS_fsm_state5, trunc_ln168_3_reg_919, ap_CS_fsm_state8, trunc_ln168_5_reg_952, ap_CS_fsm_state11, trunc_ln168_7_reg_995, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            JpegEncoder_buffer_d1 <= trunc_ln168_7_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            JpegEncoder_buffer_d1 <= trunc_ln168_5_reg_952;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            JpegEncoder_buffer_d1 <= trunc_ln168_3_reg_919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            JpegEncoder_buffer_d1 <= trunc_ln168_1_reg_881;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            JpegEncoder_buffer_d1 <= rgb_in_TDATA(23 downto 16);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            JpegEncoder_buffer_d1 <= rgb_in_TDATA(15 downto 8);
        else 
            JpegEncoder_buffer_d1 <= "XXXXXXXX";
        end if; 
    end process;


    JpegEncoder_buffer_we0_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            JpegEncoder_buffer_we0 <= ap_const_logic_1;
        else 
            JpegEncoder_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    JpegEncoder_buffer_we1_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            JpegEncoder_buffer_we1 <= ap_const_logic_1;
        else 
            JpegEncoder_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln163_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv13_8) + unsigned(i_0_0_reg_283));
    add_ln167_1_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(sub_ln166_3_reg_907));
    add_ln167_2_fu_689_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(sub_ln166_5_reg_940));
    add_ln167_3_fu_825_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(sub_ln166_7_reg_978));
    add_ln167_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(sub_ln166_1_reg_869));
    add_ln168_1_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_2_reg_891));
    add_ln168_2_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_3_reg_907));
    add_ln168_3_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_5_reg_940));
    add_ln168_4_fu_770_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_6_reg_962));
    add_ln168_5_fu_834_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_7_reg_978));
    add_ln168_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(sub_ln166_1_reg_869));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln163_fu_331_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln163_fu_331_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln163_fu_331_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln163_fu_331_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_0_0_cast8_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_reg_283),16));
    icmp_ln163_fu_331_p2 <= "1" when (i_0_0_reg_283 = ap_const_lv13_1400) else "0";
    or_ln163_1_fu_458_p2 <= (i_0_0_reg_283 or ap_const_lv13_2);
    or_ln163_2_fu_514_p2 <= (i_0_0_reg_283 or ap_const_lv13_3);
    or_ln163_3_fu_588_p2 <= (i_0_0_reg_283 or ap_const_lv13_4);
    or_ln163_4_fu_639_p2 <= (i_0_0_reg_283 or ap_const_lv13_5);
    or_ln163_5_fu_719_p2 <= (i_0_0_reg_283 or ap_const_lv13_6);
    or_ln163_6_fu_775_p2 <= (i_0_0_reg_283 or ap_const_lv13_7);
    or_ln163_fu_378_p2 <= (i_0_0_reg_283 or ap_const_lv13_1);
    or_ln167_1_fu_494_p2 <= (sext_ln166_2_fu_486_p1 or ap_const_lv32_1);
    or_ln167_2_fu_624_p2 <= (sext_ln166_4_fu_616_p1 or ap_const_lv32_1);
    or_ln167_3_fu_755_p2 <= (sext_ln166_6_fu_747_p1 or ap_const_lv32_1);
    or_ln167_fu_363_p2 <= (sext_ln166_fu_355_p1 or ap_const_lv32_1);
    or_ln168_1_fu_667_p2 <= (sub_ln166_4_reg_929 or ap_const_lv16_2);
    or_ln168_fu_406_p2 <= (sub_ln166_reg_858 or ap_const_lv16_2);

    rgb_in_TDATA_blk_n_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            rgb_in_TDATA_blk_n <= rgb_in_TVALID;
        else 
            rgb_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rgb_in_TREADY_assign_proc : process(rgb_in_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((rgb_in_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            rgb_in_TREADY <= ap_const_logic_1;
        else 
            rgb_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln166_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_1_reg_869),32));

        sext_ln166_2_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_2_reg_891),32));

        sext_ln166_3_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_3_reg_907),32));

        sext_ln166_4_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_4_reg_929),32));

        sext_ln166_5_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_5_reg_940),32));

        sext_ln166_6_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_6_reg_962),32));

        sext_ln166_7_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_7_reg_978),32));

        sext_ln166_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln166_reg_858),32));

        sext_ln167_1_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln167_1_reg_914),32));

        sext_ln167_2_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln167_2_reg_947),32));

        sext_ln167_3_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln167_3_reg_990),32));

        sext_ln167_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln167_reg_876),32));

        sext_ln168_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_reg_886),32));

        sext_ln168_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_1_reg_902),32));

        sext_ln168_3_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_2_reg_924),32));

        sext_ln168_4_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln168_1_fu_667_p2),32));

        sext_ln168_5_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_3_reg_957),32));

        sext_ln168_6_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_4_reg_973),32));

        sext_ln168_7_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln168_5_reg_1000),32));

        sext_ln168_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln168_fu_406_p2),32));

    shl_ln166_1_fu_388_p3 <= (or_ln163_fu_378_p2 & ap_const_lv2_0);
    shl_ln166_2_fu_468_p3 <= (or_ln163_1_fu_458_p2 & ap_const_lv2_0);
    shl_ln166_3_fu_524_p3 <= (or_ln163_2_fu_514_p2 & ap_const_lv2_0);
    shl_ln166_4_fu_598_p3 <= (or_ln163_3_fu_588_p2 & ap_const_lv2_0);
    shl_ln166_5_fu_649_p3 <= (or_ln163_4_fu_639_p2 & ap_const_lv2_0);
    shl_ln166_6_fu_729_p3 <= (or_ln163_5_fu_719_p2 & ap_const_lv2_0);
    shl_ln166_7_fu_785_p3 <= (or_ln163_6_fu_775_p2 & ap_const_lv2_0);
    shl_ln_fu_337_p3 <= (i_0_0_reg_283 & ap_const_lv2_0);
    sub_ln166_1_fu_400_p2 <= std_logic_vector(unsigned(zext_ln166_9_fu_396_p1) - unsigned(zext_ln163_fu_384_p1));
    sub_ln166_2_fu_480_p2 <= std_logic_vector(unsigned(zext_ln166_10_fu_476_p1) - unsigned(zext_ln163_1_fu_464_p1));
    sub_ln166_3_fu_536_p2 <= std_logic_vector(unsigned(zext_ln166_11_fu_532_p1) - unsigned(zext_ln163_2_fu_520_p1));
    sub_ln166_4_fu_610_p2 <= std_logic_vector(unsigned(zext_ln166_12_fu_606_p1) - unsigned(zext_ln163_3_fu_594_p1));
    sub_ln166_5_fu_661_p2 <= std_logic_vector(unsigned(zext_ln166_13_fu_657_p1) - unsigned(zext_ln163_4_fu_645_p1));
    sub_ln166_6_fu_741_p2 <= std_logic_vector(unsigned(zext_ln166_14_fu_737_p1) - unsigned(zext_ln163_5_fu_725_p1));
    sub_ln166_7_fu_797_p2 <= std_logic_vector(unsigned(zext_ln166_15_fu_793_p1) - unsigned(zext_ln163_6_fu_781_p1));
    sub_ln166_fu_349_p2 <= std_logic_vector(unsigned(zext_ln166_8_fu_345_p1) - unsigned(i_0_0_cast8_fu_327_p1));
    trunc_ln168_1_fu_433_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_2_fu_505_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_3_fu_563_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_4_fu_635_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_5_fu_694_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_6_fu_766_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_7_fu_830_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    trunc_ln168_fu_374_p1 <= rgb_in_TDATA(8 - 1 downto 0);
    zext_ln163_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_1_fu_458_p2),16));
    zext_ln163_2_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_2_fu_514_p2),16));
    zext_ln163_3_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_3_fu_588_p2),16));
    zext_ln163_4_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_4_fu_639_p2),16));
    zext_ln163_5_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_5_fu_719_p2),16));
    zext_ln163_6_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_6_fu_775_p2),16));
    zext_ln163_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln163_fu_378_p2),16));
    zext_ln166_10_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_2_fu_468_p3),16));
    zext_ln166_11_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_3_fu_524_p3),16));
    zext_ln166_12_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_4_fu_598_p3),16));
    zext_ln166_13_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_5_fu_649_p3),16));
    zext_ln166_14_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_6_fu_729_p3),16));
    zext_ln166_15_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_7_fu_785_p3),16));
    zext_ln166_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_1_fu_420_p1),64));
    zext_ln166_2_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_2_fu_486_p1),64));
    zext_ln166_3_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_3_fu_550_p1),64));
    zext_ln166_4_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_4_fu_616_p1),64));
    zext_ln166_5_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_5_fu_681_p1),64));
    zext_ln166_6_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_6_fu_747_p1),64));
    zext_ln166_7_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_7_fu_817_p1),64));
    zext_ln166_8_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_337_p3),16));
    zext_ln166_9_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln166_1_fu_388_p3),16));
    zext_ln166_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_fu_355_p1),64));
    zext_ln167_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln167_fu_442_p1),64));
    zext_ln167_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_1_fu_494_p2),64));
    zext_ln167_3_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln167_1_fu_572_p1),64));
    zext_ln167_4_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_2_fu_624_p2),64));
    zext_ln167_5_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln167_2_fu_703_p1),64));
    zext_ln167_6_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_3_fu_755_p2),64));
    zext_ln167_7_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln167_3_fu_839_p1),64));
    zext_ln167_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_fu_363_p2),64));
    zext_ln168_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_1_fu_450_p1),64));
    zext_ln168_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_2_fu_542_p1),64));
    zext_ln168_3_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_3_fu_580_p1),64));
    zext_ln168_4_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_4_fu_672_p1),64));
    zext_ln168_5_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_5_fu_711_p1),64));
    zext_ln168_6_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_6_fu_809_p1),64));
    zext_ln168_7_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_7_fu_847_p1),64));
    zext_ln168_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln168_fu_411_p1),64));
end behav;
